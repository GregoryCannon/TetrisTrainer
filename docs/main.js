/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/board_edit_manager.js":
/*!***********************************!*\
  !*** ./src/board_edit_manager.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BoardEditManager: () => (/* binding */ BoardEditManager)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./src/constants.js\");\nconst mainCanvas = document.getElementById(\"main-canvas\");\n\n\n\nfunction BoardEditManager(board, canvas) {\n  this.board = board;\n  this.canvas = canvas;\n  this.mouseIsDown = false;\n  this.squaresToggled = new Set();\n  this.dragMode = DragMode.NONE;\n}\n\n// We want the drag action to either only add squares or only remove squares, not mix the two\nconst DragMode = Object.freeze({\n  ADDING: \"adding\",\n  REMOVING: \"removing\",\n  NONE: \"none\",\n});\n\nfunction getRowAndColOfMouseCoords(event) {\n  const rect = mainCanvas.getBoundingClientRect();\n  const x = event.clientX - rect.left;\n  const y = event.clientY - rect.top;\n  const r = Math.floor(y / _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE);\n  const c = Math.floor(x / _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE);\n  return [r, c];\n}\n\n// A predictable way to get a string key from a pair of integers\nfunction getStringKey(numA, numB) {\n  return numA + \",\" + numB;\n}\n\nBoardEditManager.prototype.toggleCell = function (r, c) {\n  // Add this to the toggled set so it doesn't flicker on and off during drag\n  this.squaresToggled.add(getStringKey(r, c));\n\n  this.board[r][c] =\n    this.board[r][c] == _constants_js__WEBPACK_IMPORTED_MODULE_0__.SquareState.EMPTY\n      ? _constants_js__WEBPACK_IMPORTED_MODULE_0__.SquareState.COLOR1\n      : _constants_js__WEBPACK_IMPORTED_MODULE_0__.SquareState.EMPTY;\n  this.canvas.drawBoard();\n  this.canvas.drawCurrentPiece();\n};\n\nBoardEditManager.prototype.onMouseDown = function (event) {\n  let r, c;\n  [r, c] = getRowAndColOfMouseCoords(event);\n  this.mouseIsDown = true;\n  this.dragMode =\n    this.board[r][c] == _constants_js__WEBPACK_IMPORTED_MODULE_0__.SquareState.EMPTY ? DragMode.ADDING : DragMode.REMOVING;\n  this.toggleCell(r, c);\n};\n\nBoardEditManager.prototype.onMouseDrag = function (event) {\n  if (!this.mouseIsDown) {\n    return;\n  }\n  let r, c;\n  [r, c] = getRowAndColOfMouseCoords(event);\n  const cellShouldBeFlipped =\n    this.dragMode == DragMode.ADDING\n      ? this.board[r][c] == _constants_js__WEBPACK_IMPORTED_MODULE_0__.SquareState.EMPTY\n      : this.board[r][c] != _constants_js__WEBPACK_IMPORTED_MODULE_0__.SquareState.EMPTY;\n  if (cellShouldBeFlipped && !this.squaresToggled.has(getStringKey(r, c))) {\n    this.toggleCell(r, c);\n  }\n};\n\nBoardEditManager.prototype.onMouseUp = function (event) {\n  this.mouseIsDown = false;\n  this.squaresToggled = new Set();\n};\n\n\n//# sourceURL=webpack://tetrisjs/./src/board_edit_manager.js?");

/***/ }),

/***/ "./src/board_generator.js":
/*!********************************!*\
  !*** ./src/board_generator.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BoardGenerator: () => (/* binding */ BoardGenerator)\n/* harmony export */ });\nconst { NUM_COLUMN, NUM_ROW, SquareState } = __webpack_require__(/*! ./constants */ \"./src/constants.js\");\n\nfunction BoardGenerator(board, canvas) {\n  this.board = board;\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Clears out the game board, in-place.\n */\nBoardGenerator.prototype.loadEmptyBoard = function () {\n  for (let r = 0; r < NUM_ROW; r++) {\n    for (let c = 0; c < NUM_COLUMN; c++) {\n      this.board[r][c] = SquareState.EMPTY;\n    }\n  }\n};\n\n/**\n * Loads a standard-ish sloping board, in-place.\n */\nBoardGenerator.prototype.loadStandardBoard = function () {\n  this.loadEmptyBoard();\n\n  let currentHeight = getRandomInt(6, 10);\n  for (let col = 0; col < NUM_COLUMN - 1; col++) {\n    const heightThisCol = Math.min(12, Math.max(0, currentHeight));\n    // There's some subtraction here because the origin is at the top\n    // but 0 height is at the bottom\n    for (let row = NUM_ROW - heightThisCol - 1; row < NUM_ROW; row++) {\n      const colorIndex = row % 3;\n      const rowColor = [\n        SquareState.COLOR1,\n        SquareState.COLOR2,\n        SquareState.COLOR3,\n      ][colorIndex];\n\n      this.board[row][col] = rowColor;\n    }\n\n    // Apply a random factor that makes it favor sloping right\n    currentHeight += getRandomInt(-2, 1);\n  }\n};\n\nconst HOLE_PROBABILITIES = {\n  NONE: 0.5,\n  ONE: 0.4,\n  TWO: 0.1,\n};\n\n/**\n * Loads a board with holes in it, in-place.\n */\nBoardGenerator.prototype.loadDigBoard = function () {\n  this.loadStandardBoard();\n\n  for (let row = 0; row < NUM_ROW; row++) {\n    let numHoles;\n    const rand0To1 = Math.random();\n    if (rand0To1 < HOLE_PROBABILITIES.NONE) {\n      numHoles = 0;\n    } else if (rand0To1 < HOLE_PROBABILITIES.NONE + HOLE_PROBABILITIES.ONE) {\n      numHoles = 1;\n    } else {\n      numHoles = 2;\n    }\n\n    for (let i = 0; i < numHoles; i++) {\n      this.board[row][getRandomInt(0, NUM_COLUMN)] = SquareState.EMPTY;\n    }\n  }\n};\n\n\n//# sourceURL=webpack://tetrisjs/./src/board_generator.js?");

/***/ }),

/***/ "./src/board_loader.js":
/*!*****************************!*\
  !*** ./src/board_loader.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BoardLoader: () => (/* binding */ BoardLoader)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./src/constants.js\");\nconst pasteAreaElement = document.getElementById(\"paste-area\");\nconst pastedImageElement = document.getElementById(\"pasted-image\");\n\n\n\n\nlet m_loadedStateFromImage = false;\nlet m_loadedBoard = [];\n\nfunction BoardLoader(board, canvas) {\n  this.board = board;\n  this.canvas = canvas;\n\n  setUpPasteability(this);\n}\n\nBoardLoader.prototype.resetBoard = function () {\n  // Reload the board from the image, or reset the board\n  // (have to iterate manually (not use this.board = ) to preserve the board reference that's passed around to all the files\n  for (let r = 0; r < _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_ROW; r++) {\n    for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_COLUMN; c++) {\n      this.board[r][c] = m_loadedStateFromImage\n        ? m_loadedBoard[r][c]\n        : _constants_js__WEBPACK_IMPORTED_MODULE_0__.SquareState.EMPTY;\n    }\n  }\n};\n\n// Get whether the board has been loaded from an image\nBoardLoader.prototype.didLoadBoardStateFromImage = function () {\n  return m_loadedStateFromImage;\n};\n\nBoardLoader.prototype.getBoardStateFromImage = function (img) {\n  var dummy_canvas = document.getElementById(\"dummy-canvas\");\n  var context = dummy_canvas.getContext(\"2d\");\n  dummy_canvas.width = img.width;\n  dummy_canvas.height = img.height;\n  context.drawImage(img, 0, 0);\n  this.resetBoard();\n\n  const cropOffset = -0.1;\n  const SQ = (img.height / 20 + img.width / 10) / 2 + cropOffset;\n  const rgbEmptyThreshold = 30; // If all three channels are <30/255, then the cell is \"empty\"\n\n  // Iterate over the image and read the square colors into the board\n  for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_COLUMN; c++) {\n    for (let r = 0; r < _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_ROW; r++) {\n      const x = Math.round((c + 0.5) * SQ);\n      const y = Math.round((r + 0.5) * SQ);\n      const pixelData = context.getImageData(x, y, 1, 1).data;\n      if (\n        Math.max(pixelData[0], pixelData[1], pixelData[2]) > rgbEmptyThreshold\n      ) {\n        context.fillStyle = \"RED\";\n        this.board[r][c] = _constants_js__WEBPACK_IMPORTED_MODULE_0__.SquareState.COLOR2;\n      } else {\n        context.fillStyle = \"GREEN\";\n\n        this.board[r][c] = _constants_js__WEBPACK_IMPORTED_MODULE_0__.SquareState.EMPTY;\n      }\n      context.fillRect(x, y, 3, 3);\n    }\n  }\n\n  // Edit out the currently falling piece from the boardstate\n  clearFloatingPiece(this.board, context, SQ);\n  m_loadedBoard = JSON.parse(JSON.stringify(this.board)); // Save a copy of the loaded board\n  this.canvas.drawBoard();\n  m_loadedStateFromImage = true;\n\n  // Hide the dummy canvas afterwards\n  setTimeout(() => {\n    dummy_canvas.style.display = \"none\";\n  }, 3000);\n};\n\n// Remove the piece from midair when loading a board from a screenshot\nfunction clearFloatingPiece(board, dummyContext, SQ) {\n  // Start from the bottom, look for an empty row, and then clear all rows above that\n  let startedClearing = false;\n  for (let r = _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_ROW - 1; r >= 0; r--) {\n    if (startedClearing) {\n      for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_COLUMN; c++) {\n        board[r][c] = _constants_js__WEBPACK_IMPORTED_MODULE_0__.SquareState.EMPTY;\n      }\n    } else {\n      let rowEmpty = true;\n      for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_COLUMN; c++) {\n        if (board[r][c] != _constants_js__WEBPACK_IMPORTED_MODULE_0__.SquareState.EMPTY) {\n          rowEmpty = false;\n          break;\n        }\n      }\n      if (rowEmpty) {\n        startedClearing = true;\n\n        dummyContext.fillStyle = \"BLACK\";\n        dummyContext.fillRect(0, 0, SQ * _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_COLUMN, r * SQ);\n      }\n    }\n  }\n}\n\nfunction setUpPasteability(boardLoaderThis) {\n  // When an image is pasted, get the board state from it\n  pasteAreaElement.onpaste = function (event) {\n    // use event.originalEvent.clipboard for newer chrome versions\n    var items = (event.clipboardData || event.originalEvent.clipboardData)\n      .items;\n    // find pasted image among pasted items\n    var blob = null;\n    for (var i = 0; i < items.length; i++) {\n      if (items[i].type.indexOf(\"image\") === 0) {\n        blob = items[i].getAsFile();\n      }\n    }\n    // load image if there is a pasted image\n    if (blob !== null) {\n      var reader = new FileReader();\n      reader.onload = function (event) {\n        pastedImageElement.onload = function () {\n          boardLoaderThis.getBoardStateFromImage(pastedImageElement);\n        };\n        pastedImageElement.src = event.target.result;\n      };\n      reader.readAsDataURL(blob);\n    }\n  };\n}\n\n\n//# sourceURL=webpack://tetrisjs/./src/board_loader.js?");

/***/ }),

/***/ "./src/canvas.js":
/*!***********************!*\
  !*** ./src/canvas.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Canvas: () => (/* binding */ Canvas)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./src/constants.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ \"./src/index.js\");\nconst mainCanvas = document.getElementById(\"main-canvas\");\nconst context = mainCanvas.getContext(\"2d\");\n\n\n\nconst GameSettings = __webpack_require__(/*! ./game_settings_manager */ \"./src/game_settings_manager.js\");\n\n// Resize the canvas based on the square size\nmainCanvas.setAttribute(\"height\", _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE * _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_ROW);\nmainCanvas.setAttribute(\"width\", _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE * (_constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_COLUMN + 7)); // +6 for next boxk\n\nfunction Canvas(board) {\n  this.board = board;\n}\n\n/** Runs an animation to clear the lines passed in in an array.\n * Doesn't affect the actual board, those updates come at the end of the animation. */\nCanvas.prototype.drawLineClears = function (rowsArray, frameNum) {\n  if (frameNum >= 15) {\n    // animation already done\n    return;\n  }\n  const rightColToClear = 5 + Math.floor(frameNum / 3);\n  const leftColToClear = 9 - rightColToClear;\n  for (const rowNum of rowsArray) {\n    context.fillStyle = \"black\";\n    context.fillRect(\n      leftColToClear * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE,\n      rowNum * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE,\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE,\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE,\n    );\n    context.fillRect(\n      rightColToClear * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE,\n      rowNum * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE,\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE,\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE,\n    );\n  }\n};\n\n// draw a square\nCanvas.prototype.drawSquare = function (x, y, color, border = false) {\n  if (color == _constants_js__WEBPACK_IMPORTED_MODULE_0__.VACANT) {\n    context.fillStyle = \"black\";\n    context.fillRect(\n      x * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE,\n      y * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE,\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE,\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE,\n    );\n    return;\n  }\n\n  // For I, T, and O\n  context.fillStyle = color;\n  context.fillRect(\n    x * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE,\n    y * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE,\n    7 * _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE,\n    7 * _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE,\n  );\n\n  if (border && color !== _constants_js__WEBPACK_IMPORTED_MODULE_0__.VACANT) {\n    context.fillStyle = \"white\";\n    context.fillRect(\n      x * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE + _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE,\n      y * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE + _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE,\n      5 * _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE,\n      5 * _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE,\n    );\n  }\n  // Draw 'shiny' part\n  if (color !== _constants_js__WEBPACK_IMPORTED_MODULE_0__.VACANT) {\n    context.fillStyle = \"white\";\n    context.fillRect(x * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE, y * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE, _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE, _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE);\n    context.fillRect(\n      x * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE + _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE,\n      y * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE + _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE,\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE,\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE,\n    );\n    context.fillRect(\n      x * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE + _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE + _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE,\n      y * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE + _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE,\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE,\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE,\n    );\n    context.fillRect(\n      x * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE + _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE,\n      y * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE + _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE + _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE,\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE,\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE,\n    );\n  }\n};\n\n/**\n * Draws the next box. If nextPiece is nonnull, draws the piece in it.\n * @param {Piece object} nextPiece\n */\nCanvas.prototype.drawNextBox = function (nextPiece) {\n  // All in units of SQUARE_SIZE\n  const startX = _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_COLUMN + 1;\n  const startY = 8;\n  const width = 5;\n  const height = 4.5;\n\n  // background\n  context.fillStyle = \"BLACK\";\n  context.fillRect(\n    startX * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE,\n    startY * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE,\n    width * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE,\n    height * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE,\n  );\n\n  if (nextPiece != null) {\n    const pieceStartX =\n      nextPiece.id === \"I\" || nextPiece.id === \"O\" ? startX + 0.5 : startX;\n    const pieceStartY = nextPiece.id === \"I\" ? startY - 0.25 : startY + 0.25;\n    const color = _constants_js__WEBPACK_IMPORTED_MODULE_0__.COLOR_PALETTE[nextPiece.colorId][(0,_index_js__WEBPACK_IMPORTED_MODULE_1__.GetLevel)() % 10];\n\n    // draw the piece\n\n    for (let r = 0; r < nextPiece.activeTetromino.length; r++) {\n      for (let c = 0; c < nextPiece.activeTetromino[r].length; c++) {\n        // Draw only occupied squares\n        if (nextPiece.activeTetromino[r][c]) {\n          this.drawSquare(\n            pieceStartX + c,\n            pieceStartY + r,\n            color,\n            nextPiece.colorId === 1,\n          );\n        }\n      }\n    }\n  }\n};\n\nCanvas.prototype.drawScoreDisplay = function (score, color) {\n  const width = _constants_js__WEBPACK_IMPORTED_MODULE_0__.NEXT_BOX_WIDTH;\n  const startX = _constants_js__WEBPACK_IMPORTED_MODULE_0__.BOARD_WIDTH + _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE;\n  const startY = 0.5 * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE;\n\n  const size = score >= 1000000 ? 7 : 6;\n  const formattedScore = (\"0\".repeat(size) + score).slice(-1 * size);\n  this.drawMultiLineText(\n    [\"SCORE\", formattedScore],\n    startX,\n    startY,\n    width,\n    \"center\",\n    color,\n  );\n};\n\nCanvas.prototype.drawLinesDisplay = function (numLines, color) {\n  const width = _constants_js__WEBPACK_IMPORTED_MODULE_0__.NEXT_BOX_WIDTH;\n  const startX = _constants_js__WEBPACK_IMPORTED_MODULE_0__.BOARD_WIDTH + _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE;\n  const startY = 3 * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE;\n\n  const formattedScore = (\"0\".repeat(3) + numLines).slice(-3);\n  this.drawMultiLineText(\n    [\"LINES\", formattedScore],\n    startX,\n    startY,\n    width,\n    \"center\",\n    color,\n  );\n};\n\nCanvas.prototype.drawLevelDisplay = function (level, color) {\n  const width = _constants_js__WEBPACK_IMPORTED_MODULE_0__.NEXT_BOX_WIDTH;\n  const startX = _constants_js__WEBPACK_IMPORTED_MODULE_0__.BOARD_WIDTH + _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE;\n  const startY = 14 * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE;\n\n  const formattedScore = (\"0\".repeat(2) + level).slice(-2);\n  this.drawMultiLineText(\n    [\"LEVEL\", formattedScore],\n    startX,\n    startY,\n    width,\n    \"center\",\n    color,\n  );\n};\n\nCanvas.prototype.drawTetrisRateDisplay = function (tetrisCount, lines, color) {\n  const width = _constants_js__WEBPACK_IMPORTED_MODULE_0__.NEXT_BOX_WIDTH;\n  const startX = _constants_js__WEBPACK_IMPORTED_MODULE_0__.BOARD_WIDTH + _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE;\n  const startY = 17 * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE;\n\n  let tetrisRate = 0;\n  if (lines > 0) {\n    tetrisRate = (4 * tetrisCount) / lines;\n  }\n  const formattedTetrisRate = parseInt(tetrisRate * 100);\n  this.drawMultiLineText(\n    [\"TRT\", formattedTetrisRate + \"%\"],\n    startX,\n    startY,\n    width,\n    \"center\",\n    color,\n  );\n};\n\nCanvas.prototype.drawPieceStatusDisplay = function (linesOfText) {\n  const width = _constants_js__WEBPACK_IMPORTED_MODULE_0__.NEXT_BOX_WIDTH;\n  const startX = _constants_js__WEBPACK_IMPORTED_MODULE_0__.BOARD_WIDTH + _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE;\n  const startY = 6 * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE;\n\n  this.drawMultiLineText(linesOfText, startX, startY, width, \"center\");\n};\n\nCanvas.prototype.drawMultiLineText = function (\n  linesOfText,\n  startX,\n  startY,\n  width,\n  align,\n  color,\n) {\n  const lineHeight = 20;\n\n  // Clear previous text\n  context.clearRect(startX, startY, width, linesOfText.length * lineHeight);\n\n  // Write \"x of x\" text\n  context.textAlign = \"center\";\n  context.font = \"18px 'Press Start 2P'\";\n  context.fillStyle = typeof color === \"string\" ? color : \"BLACK\";\n\n  const alignOffsetFactor = align == \"center\" ? width / 2 : 0;\n\n  let lineIndex = 0;\n  for (let line of linesOfText) {\n    context.fillText(\n      line.toUpperCase(),\n      startX + alignOffsetFactor,\n      startY + (lineIndex + 1) * lineHeight,\n    );\n    lineIndex++;\n  }\n};\n\nCanvas.prototype.drawPiece = function (piece) {\n  if (piece == undefined) {\n    return;\n  }\n  const level = (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.GetLevel)();\n  const border = piece.id === \"T\" || piece.id === \"O\" || piece.id === \"I\";\n  for (let r = 0; r < piece.activeTetromino.length; r++) {\n    for (let c = 0; c < piece.activeTetromino[r].length; c++) {\n      // Draw only occupied squares\n      if (piece.activeTetromino[r][c]) {\n        if (piece.colorId !== 0) {\n          this.drawSquare(\n            piece.x + c,\n            piece.y + r,\n            _constants_js__WEBPACK_IMPORTED_MODULE_0__.COLOR_PALETTE[piece.colorId][level % 10],\n            border,\n          );\n        } else {\n          this.drawSquare(piece.x + c, piece.y + r, _constants_js__WEBPACK_IMPORTED_MODULE_0__.VACANT, border);\n        }\n      }\n    }\n  }\n};\n\nCanvas.prototype.unDrawPiece = function (piece) {\n  if (piece == undefined) {\n    return;\n  }\n  for (let r = 0; r < piece.activeTetromino.length; r++) {\n    for (let c = 0; c < piece.activeTetromino[r].length; c++) {\n      // Erase occupied squares\n      if (piece.activeTetromino[r][c]) {\n        this.drawSquare(piece.x + c, piece.y + r, _constants_js__WEBPACK_IMPORTED_MODULE_0__.VACANT, false);\n      }\n    }\n  }\n};\n\nCanvas.prototype.drawCurrentPiece = function () {\n  this.drawPiece((0,_index_js__WEBPACK_IMPORTED_MODULE_1__.GetCurrentPiece)());\n};\n\nCanvas.prototype.unDrawCurrentPiece = function () {\n  this.unDrawPiece((0,_index_js__WEBPACK_IMPORTED_MODULE_1__.GetCurrentPiece)());\n};\n\n// Draw the pieces locked into the board (NB: does not render the current piece)\nCanvas.prototype.drawBoard = function () {\n  // const drawStart = window.performance.now();\n  const level = (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.GetLevel)();\n  for (let r = 0; r < _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_ROW; r++) {\n    for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_COLUMN; c++) {\n      let square = this.board[r][c];\n      if (square !== 0) {\n        this.drawSquare(c, r, _constants_js__WEBPACK_IMPORTED_MODULE_0__.COLOR_PALETTE[square][level % 10], square === 1);\n      } else {\n        this.drawSquare(c, r, _constants_js__WEBPACK_IMPORTED_MODULE_0__.VACANT, square === 1);\n      }\n    }\n  }\n\n  if (GameSettings.shouldShowDiggingHints()) {\n    this.drawDiggingHints();\n  }\n  if (GameSettings.shouldShowParityHints()) {\n    this.drawParityHints();\n  }\n  // const drawEnd = window.performance.now();\n  // console.log(drawEnd - drawStart);\n};\n\nfunction filledIfExists(row, col, board) {\n  if (col < 0 || col >= _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_COLUMN || row < 0 || row >= _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_ROW) {\n    return true;\n  }\n  return board[row][col] != _constants_js__WEBPACK_IMPORTED_MODULE_0__.SquareState.EMPTY;\n}\n\nfunction getTopmostHole(board) {\n  for (let r = 0; r < _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_ROW; r++) {\n    for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_COLUMN; c++) {\n      if (\n        board[r][c] == _constants_js__WEBPACK_IMPORTED_MODULE_0__.SquareState.EMPTY &&\n        filledIfExists(r - 1, c, board) &&\n        filledIfExists(r + 1, c, board) &&\n        filledIfExists(r, c - 1, board) &&\n        filledIfExists(r, c + 1, board)\n      ) {\n        return [r, c];\n      }\n    }\n  }\n  return [];\n}\n\nfunction getRowsCoveringWell(board) {\n  let r = _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_ROW - 1;\n  let rowsCoveringWell = [];\n  while (!filledIfExists(r, _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_COLUMN - 1, board)) {\n    r--;\n  }\n  while (r >= 0 && filledIfExists(r, _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_COLUMN - 1, board)) {\n    rowsCoveringWell.push(r);\n    r--;\n  }\n  return rowsCoveringWell;\n}\n\nfunction fillSquare(row, col, color) {\n  context.fillStyle = color;\n  context.fillRect(\n    col * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE + _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE,\n    row * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE + _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE,\n    _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE - 3 * _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE,\n    _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE - 3 * _constants_js__WEBPACK_IMPORTED_MODULE_0__.PIXEL_SIZE,\n  );\n}\n\nfunction fillRow(row, color, board) {\n  for (let loopCol = 0; loopCol < _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_COLUMN; loopCol++) {\n    if (board[row][loopCol] == _constants_js__WEBPACK_IMPORTED_MODULE_0__.SquareState.EMPTY) {\n      fillSquare(row, loopCol, color);\n    }\n  }\n}\n\nCanvas.prototype.drawDiggingHints = function () {\n  const topMostHole = getTopmostHole(this.board);\n  const rowsCoveringWell = getRowsCoveringWell(this.board);\n\n  if (topMostHole.length > 0) {\n    // Find the rows that need to be cleared\n    const row = topMostHole[0];\n    const col = topMostHole[1];\n    let rowsToClear = [];\n\n    let currentRow = row - 1;\n    while (currentRow >= 0 && filledIfExists(currentRow, col, this.board)) {\n      rowsToClear.push(currentRow);\n      currentRow -= 1;\n    }\n\n    // Draw a yellow circle in the topmost hole\n    const centerY = (row + 0.45) * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE;\n    const centerX = (col + 0.45) * _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE;\n    const radius = _constants_js__WEBPACK_IMPORTED_MODULE_0__.SQUARE_SIZE / 4;\n    context.fillStyle = \"yellow\";\n    context.beginPath();\n    context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n    context.fill();\n\n    // Fill in the empty spaces with red in rows that need to be cleared\n    for (let loopRow of rowsToClear) {\n      fillRow(loopRow, \"#842424\", this.board);\n    }\n  } else if (rowsCoveringWell.length > 0) {\n    // Fill in the empty spaces with red in rows that need to be cleared\n    for (let loopRow of rowsCoveringWell) {\n      fillRow(loopRow, \"#215E30\", this.board);\n    }\n  }\n};\n\nfunction numToSingleDigiHex(num) {\n  num = Math.floor(num);\n  if (num < 0) {\n    throw new Error(\"Can't convert negative num to hex\");\n  }\n  if (num < 10) {\n    return \"\" + num;\n  } else if (num < 16) {\n    return [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"][num - 10];\n  } else {\n    // Max out at 16 because single digit\n    return \"f\";\n  }\n}\n\nCanvas.prototype.drawParityHints = function () {\n  const localParities = [];\n  for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_COLUMN; c++) {\n    localParities[c] = (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.calcParity)(c - 2, c + 3);\n  }\n\n  // Normalize over the nearby columns\n  let normalizedLocalParities = [];\n  for (let i = 0; i < _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_COLUMN; i++) {\n    let total = 0;\n    let numAdded = 0;\n    [i - 1, i, i + 1].forEach((x) => {\n      if (x >= 0 && x < _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_COLUMN) {\n        total += localParities[x];\n        numAdded += 1;\n      }\n    });\n    if (numAdded == 0) {\n      throw new Error(\"None added\");\n    }\n    normalizedLocalParities[i] = total / numAdded; // numAdded is never 0 since the col itself will always be added\n  }\n\n  for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_COLUMN; c++) {\n    const normalizedLocalParity = normalizedLocalParities[c];\n    for (let r = 0; r < _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_ROW; r++) {\n      if (this.board[r][c] == _constants_js__WEBPACK_IMPORTED_MODULE_0__.SquareState.EMPTY) {\n        // Get a shade of red proportional to the parity\n        const transformedParity = Math.max(5 * normalizedLocalParity - 4, 0);\n        const alphaChannel = numToSingleDigiHex(transformedParity);\n        const fillColor = \"#ff0000\" + alphaChannel + alphaChannel;\n        fillSquare(r, c, fillColor);\n      }\n    }\n  }\n};\n\n\n//# sourceURL=webpack://tetrisjs/./src/canvas.js?");

/***/ }),

/***/ "./src/constants.js":
/*!**************************!*\
  !*** ./src/constants.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BLUE_COLOR: () => (/* binding */ BLUE_COLOR),\n/* harmony export */   BOARD_HEIGHT: () => (/* binding */ BOARD_HEIGHT),\n/* harmony export */   BOARD_TOP_MARGIN: () => (/* binding */ BOARD_TOP_MARGIN),\n/* harmony export */   BOARD_WIDTH: () => (/* binding */ BOARD_WIDTH),\n/* harmony export */   COLOR_1: () => (/* binding */ COLOR_1),\n/* harmony export */   COLOR_2: () => (/* binding */ COLOR_2),\n/* harmony export */   COLOR_3: () => (/* binding */ COLOR_3),\n/* harmony export */   COLOR_PALETTE: () => (/* binding */ COLOR_PALETTE),\n/* harmony export */   CalculatePushdownPoints: () => (/* binding */ CalculatePushdownPoints),\n/* harmony export */   DASBehavior: () => (/* binding */ DASBehavior),\n/* harmony export */   DASSpeed: () => (/* binding */ DASSpeed),\n/* harmony export */   DISPLAY_FULL_WIDTH: () => (/* binding */ DISPLAY_FULL_WIDTH),\n/* harmony export */   Direction: () => (/* binding */ Direction),\n/* harmony export */   GameState: () => (/* binding */ GameState),\n/* harmony export */   GetGravity: () => (/* binding */ GetGravity),\n/* harmony export */   LINE_CLEAR_DELAY: () => (/* binding */ LINE_CLEAR_DELAY),\n/* harmony export */   NEXT_BOX_WIDTH: () => (/* binding */ NEXT_BOX_WIDTH),\n/* harmony export */   NUM_COLUMN: () => (/* binding */ NUM_COLUMN),\n/* harmony export */   NUM_ROW: () => (/* binding */ NUM_ROW),\n/* harmony export */   PIXEL_SIZE: () => (/* binding */ PIXEL_SIZE),\n/* harmony export */   RED_COLOR: () => (/* binding */ RED_COLOR),\n/* harmony export */   REWARDS: () => (/* binding */ REWARDS),\n/* harmony export */   SQUARE_SIZE: () => (/* binding */ SQUARE_SIZE),\n/* harmony export */   SquareState: () => (/* binding */ SquareState),\n/* harmony export */   StartingBoardType: () => (/* binding */ StartingBoardType),\n/* harmony export */   VACANT: () => (/* binding */ VACANT),\n/* harmony export */   WHITE_COLOR: () => (/* binding */ WHITE_COLOR)\n/* harmony export */ });\nconst NUM_ROW = 20;\nconst NUM_COLUMN = 10;\nconst PIXEL_SIZE = 3; // i.e. the scaleup from 1 NES pixel\nconst SQUARE_SIZE = 8 * PIXEL_SIZE;\nconst LINE_CLEAR_DELAY = 18;\n\nconst BOARD_HEIGHT = SQUARE_SIZE * NUM_ROW;\nconst BOARD_WIDTH = SQUARE_SIZE * NUM_COLUMN;\nconst DISPLAY_FULL_WIDTH = SQUARE_SIZE * (NUM_COLUMN + 6); // Extra columns for next box\nconst BOARD_TOP_MARGIN = 2 * SQUARE_SIZE;\nconst NEXT_BOX_WIDTH = 5 * SQUARE_SIZE;\n\nconst VACANT = \"black\"; // color of an empty square\nconst RED_COLOR = \"red\";\nconst BLUE_COLOR = \"#2105f2\";\nconst WHITE_COLOR = \"white\";\n\n// 0 is empty space, 1 is T piece color, 2 is L piece color, 3 is J piece color\nconst SquareState = {\n  EMPTY: 0,\n  COLOR1: 1,\n  COLOR2: 2,\n  COLOR3: 3,\n};\n\n// color 1 is COLOR_3 with white in the center, which is used for I, T, and O\nconst COLOR_1 = {\n  0: \"rgb(0,88,248)\",\n  1: \"rgb(0,168,0)\",\n  2: \"rgb(216,0,204)\",\n  3: \"rgb(0,88,248)\",\n  4: \"rgb(228,0,88\",\n  5: \"rgb(88,248,152)\",\n  6: \"rgb(248,56,0)\",\n  7: \"rgb(104,68,252)\",\n  8: \"rgb(0,88,248)\",\n  9: \"rgb(248,56,0)\",\n};\n// color 2 is the main color of L and Z\nconst COLOR_2 = {\n  0: \"rgb(60,188,252)\",\n  1: \"rgb(148,248,24)\",\n  2: \"rgb(248,120,248)\",\n  3: \"rgb(88,216,84)\",\n  4: \"rgb(88,248,152)\",\n  5: \"rgb(104,136,252)\",\n  6: \"rgb(124,124,124)\",\n  7: \"rgb(168,0,32)\",\n  8: \"rgb(248,56,0)\",\n  9: \"rgb(252,160,68)\",\n};\n// COLOR_3 is the main color of J and S\n// It is the same as COLOR_1, but fills the whole square\nconst COLOR_3 = Object.assign(COLOR_1);\n\nconst COLOR_PALETTE = {\n  1: COLOR_1,\n  2: COLOR_2,\n  3: COLOR_3,\n};\n\nconst Direction = Object.freeze({\n  LEFT: 1,\n  RIGHT: 2,\n  DOWN: 3,\n  UP: 4,\n});\n\n// How many points for X lines at a time (before scaling by level)\nconst REWARDS = {\n  1: 40,\n  2: 100,\n  3: 300,\n  4: 1200,\n};\n// How many frames it takes to drop one square\nconst GRAVITY = {\n  0: 48,\n  1: 43,\n  2: 38,\n  3: 33,\n  4: 28,\n  5: 23,\n  6: 18,\n  7: 13,\n  8: 8,\n  9: 6,\n  10: 5,\n  11: 5,\n  12: 5,\n  13: 4,\n  14: 4,\n  15: 4,\n  16: 3,\n  17: 3,\n  18: 3,\n  19: 2,\n  29: 1,\n};\n\nfunction CalculatePushdownPoints(cellsSoftDropped) {\n  if (cellsSoftDropped >= 16) {\n    return cellsSoftDropped - 6; // Simulate the hex conversion bug in NES\n  }\n  return cellsSoftDropped;\n}\n\nfunction GetGravity(levelNum) {\n  if (levelNum <= 18) {\n    return GRAVITY[levelNum];\n  } else if (levelNum < 29) {\n    return 2;\n  } else {\n    return 1;\n  }\n}\n\nconst GameState = {\n  FIRST_PIECE: \"first_piece\",\n  RUNNING: \"running\",\n  PAUSED: \"paused\",\n  GAME_OVER: \"game_over\",\n  START_SCREEN: \"start_screen\",\n  ARE: \"are\",\n  LINE_CLEAR: \"line_clear\",\n  EDIT_STARTING_BOARD: \"edit_starting_board\",\n  RANDOM_BOARD: \"random_board\",\n};\n\nconst DASSpeed = Object.freeze({\n  STANDARD: \"standard\",\n  SLOW_MEDIUM: \"slow_medium\",\n  MEDIUM: \"medium\",\n  FAST: \"fast\",\n  FASTDAS: \"Fast DAS\",\n});\n\nconst DASBehavior = Object.freeze({\n  STANDARD: \"standard\",\n  ALWAYS_CHARGED: \"always_charged\",\n  CHARGE_ON_PIECE_SPAWN: \"charge_on_piece_spawn\",\n});\n\nconst StartingBoardType = Object.freeze({\n  EMPTY: \"empty\",\n  DIG_PRACTICE: \"dig practice\",\n  CUSTOM: \"custom\",\n});\n\n\n//# sourceURL=webpack://tetrisjs/./src/constants.js?");

/***/ }),

/***/ "./src/engine_analysis_manager.js":
/*!****************************************!*\
  !*** ./src/engine_analysis_manager.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EngineAnalysisManager: () => (/* binding */ EngineAnalysisManager)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! . */ \"./src/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"./src/constants.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"./src/utils.js\");\n\n\n\n\nconst engineTable = document.getElementById(\"engine-grid\");\nconst inexhaustiveWarningContainer = document.getElementById(\n  \"inexhaustive-warning\",\n);\nconst inexhaustiveWarningText = document.getElementById(\n  \"inexhaustive-warning-text\",\n);\nconst inexhaustiveWarningIcon = document.getElementById(\n  \"inexhaustive-warning-icon\",\n);\nconst curPieceSelect = document.getElementById(\"engine-cur-piece\");\nconst nextPieceSelect = document.getElementById(\"engine-next-piece\");\nconst tapSpeedSelect = document.getElementById(\"engine-tap-speed\");\nconst depthSelect = document.getElementById(\"engine-depth-select\");\nconst backendErrorText = document.getElementById(\"engine-backend-error\");\nconst requestButton = document.getElementById(\"engine-calculate-button\");\n\nconst IS_DEPLOY = true;\n\nfunction EngineAnalysisManager(board) {\n  this.board = board;\n  this.curPiece = \"O\";\n  this.nextPiece = \"\";\n  this.requestInfo = {};\n  // Send a ping to the server so heroku knows to wake it up\n  this.pingServer();\n  requestButton.addEventListener(\"click\", (e) => this.makeRequest());\n}\n\nEngineAnalysisManager.prototype.updatePieces = function (\n  curPieceId,\n  nextPieceId,\n) {\n  this.curPiece = curPieceId || \"\";\n  this.nextPiece = nextPieceId || \"\";\n  curPieceSelect.value = this.curPiece;\n  nextPieceSelect.value = this.nextPiece;\n};\n\nEngineAnalysisManager.prototype.pingServer = function () {\n  const url = `${\n    IS_DEPLOY ? \"https://stackrabbit.herokuapp.com\" : \"http://localhost:3000\"\n  }/ping`;\n\n  // Make request\n  fetch(url, { mode: \"cors\" })\n    .then(function (response) {\n      console.log(\"Received ack from server\");\n      return response.json();\n    })\n    .catch(function (error) {\n      console.log(\"Ping to server failed. Reason:\", error);\n    });\n};\n\nEngineAnalysisManager.prototype.makeRequest = function () {\n  // Compile arguments\n  const encodedBoard = this.board\n    .map((row) => row.slice(0, 10).join(\"\"))\n    .join(\"\")\n    .replace(/2|3/g, \"1\");\n  const curPiece = curPieceSelect.value;\n  const nextPiece = nextPieceSelect.value;\n  const tapSpeed = tapSpeedSelect.value;\n  const depthChoice = depthSelect.value.split(\"x\");\n  const playoutCount = parseInt(depthChoice[0]);\n  const playoutLength = parseInt(depthChoice[1]);\n  const requestType = nextPiece\n    ? \"engine-movelist-cpp-hybrid\"\n    : \"engine-movelist-cpp\";\n  const url = `${\n    IS_DEPLOY ? \"https://stackrabbit.net\" : \"http://localhost:3000\"\n  }/${requestType}?board=${encodedBoard}&currentPiece=${curPiece}${\n    nextPiece ? \"&nextPiece=\" + nextPiece : \"\"\n  }&level=${Math.max((0,___WEBPACK_IMPORTED_MODULE_0__.GetLevel)() || 0, 18)}&lines=${\n    (0,___WEBPACK_IMPORTED_MODULE_0__.GetLines)() || 0\n  }&inputFrameTimeline=${tapSpeed}&playoutCount=${playoutCount}&playoutLength=${playoutLength}`;\n  this.requestInfo = {\n    firstPiece: curPiece,\n    secondPiece: nextPiece,\n    playoutCount: playoutCount,\n    playoutLength: playoutLength,\n    isExhaustive: playoutCount == Math.pow(7, playoutLength),\n    isHybrid: nextPiece ? true : false,\n  };\n\n  // Make request\n  fetch(url, { mode: \"cors\" })\n    .then(function (response) {\n      return response.text();\n    })\n    .then(\n      function (responseRaw) {\n        if (tryParseJSONObject(responseRaw) === false) {\n          // Reached an error.\n          console.log(\"Request failed\", error);\n          backendErrorText.style.visibility = \"visible\";\n          backendErrorText.innerHTML =\n            \"Error loading analysis.<br/>\" + responseRaw;\n          engineTable.style.visibility = \"hidden\";\n          return null;\n        }\n        let parsedResult;\n        if (this.requestInfo.isHybrid) {\n          // The two lists are originally distinct properties in a JSON object. Instead concatenate them into one array.\n          const parsed = JSON.parse(responseRaw);\n          parsedResult = parsed.noNextBox.concat(parsed.nextBox);\n        } else {\n          parsedResult = JSON.parse(responseRaw);\n        }\n\n        this.loadResponseCpp(this.requestInfo, parsedResult);\n      }.bind(this),\n    )\n    .catch(function (error) {\n      console.log(\"Request failed\", error);\n      backendErrorText.style.visibility = \"visible\";\n      backendErrorText.innerHTML = \"Error loading analysis.<br/>\" + error;\n      engineTable.style.visibility = \"hidden\";\n    });\n\n  // Temporarily disable the button to prevent spamming\n  requestButton.disabled = true;\n  setTimeout(() => {\n    requestButton.disabled = false;\n  }, 2000);\n\n  // Reset focus (so pressing 'enter' doesn't make subsequent requests)\n  document.activeElement.blur();\n};\n\n/**\n * Helper function from https://stackoverflow.com/questions/3710204/how-to-check-if-a-string-is-a-valid-json-string\n */\nfunction tryParseJSONObject(jsonString) {\n  try {\n    var o = JSON.parse(jsonString);\n\n    // Handle non-exception-throwing cases:\n    // Neither JSON.parse(false) or JSON.parse(1234) throw errors, hence the type-checking,\n    // but... JSON.parse(null) returns null, and typeof null === \"object\",\n    // so we must check for that, too. Thankfully, null is falsey, so this suffices:\n    if (o && typeof o === \"object\") {\n      return o;\n    }\n  } catch (e) {}\n  return false;\n}\n\n/** Loads the SR2.0 engine response into the UI */\nEngineAnalysisManager.prototype.loadResponseCpp = function (reqInfo, moveList) {\n  engineTable.innerHTML = \"\";\n  backendErrorText.style.visibility = \"hidden\";\n  engineTable.style.visibility = \"visible\";\n\n  let numNnb = 0;\n  for (let i = 0; i < moveList.length; i++) {\n    if (moveList[i].secondPlacement) {\n      break;\n    }\n    numNnb += 1;\n  }\n\n  // Potentially show warning for inexhaustive playouts\n  inexhaustiveWarningContainer.style.display = \"flex\";\n  if (this.requestInfo.isExhaustive) {\n    // inexhaustiveWarningContainer.style.display = \"none\";\n    inexhaustiveWarningIcon.src = \"static/checkmark_transparent.webp\";\n    inexhaustiveWarningText.innerHTML = `All possible piece sequences were tested.`;\n  } else {\n    // inexhaustiveWarningContainer.style.display = \"flex\";\n    inexhaustiveWarningIcon.src = \"static/warning_icon_transparent.webp\";\n    inexhaustiveWarningText.innerHTML = `At high depth, it's infeasible to test every possible piece sequence. Therefore there may be some variance in the evaluation.<br/><em>Playouts Performed: ${this.requestInfo.playoutCount}</em>`;\n  }\n\n  let rankIndex = 1;\n  for (let i = 0; i < moveList.length; i++) {\n    const mainMove = moveList[i];\n\n    if (i === numNnb) {\n      // If we hit the cutoff between NNB and NB entries, reset the rankings\n      rankIndex = 1;\n\n      // Add a header for the adjustment section\n      const adjustmentHeader = document.createElement(\"h4\");\n      adjustmentHeader.innerHTML = \"Adjustments\";\n      adjustmentHeader.classList.add(\"adjustments-header\");\n      engineTable.appendChild(adjustmentHeader);\n    }\n\n    // Create a row for the default move\n    let row = document.createElement(\"div\");\n    engineTable.appendChild(row);\n    row.classList.add(\"grid-row\", \"main-move\");\n\n    // Fill the default placement row\n    let ranking = document.createElement(\"div\");\n    row.appendChild(ranking);\n    ranking.classList.add(\"ranking\");\n    ranking.innerHTML = rankIndex + \")\";\n    ranking += 1;\n\n    let evalScore = document.createElement(\"div\");\n    row.appendChild(evalScore);\n    evalScore.classList.add(\"eval-score\");\n    const numDecimalPlaces = this.requestInfo.isExhaustive ? 1 : 0;\n    evalScore.innerHTML =\n      (this.requestInfo.isExhaustive ? \"\" : \"~\") +\n      mainMove.playoutScore.toFixed(numDecimalPlaces);\n\n    let move = document.createElement(\"div\");\n    const [rot, x, y] = mainMove.firstPlacement;\n    move.innerHTML = getNotatedMoveCpp(reqInfo.firstPiece, rot, x); // -3 for coordinate conversion\n    row.appendChild(move);\n    if (mainMove.secondPlacement) {\n      // Render for NB\n      move.classList.add(\"notated-adj\");\n      const secondMove = document.createElement(\"div\");\n      secondMove.classList.add(\"notated-next\");\n      const [rot, x, y] = mainMove.secondPlacement;\n      secondMove.innerHTML = getNotatedMoveCpp(reqInfo.secondPiece, rot, x);\n      row.appendChild(secondMove);\n    } else {\n      // Render for NNB\n      move.classList.add(\"notated-move\");\n    }\n\n    let detailRow = document.createElement(\"div\");\n    engineTable.appendChild(detailRow);\n    detailRow.style.visibility = \"hidden\";\n    detailRow.style.maxHeight = \"0px\";\n    detailRow.classList.add(\"detail-view-cpp\");\n    createDetailViewCpp(detailRow, mainMove, reqInfo);\n\n    // Add a click listener to toggle visibility of the detail row\n    row.addEventListener(\"click\", (e) => {\n      toggleDetailsVisibility(detailRow);\n    });\n\n    rankIndex += 1;\n  }\n};\n\nfunction getRenderedMiniBoard(compressedBoard) {\n  const boardAry = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.DecompressBoard)(compressedBoard);\n  const squareSize = 5;\n  // Create drawing canvas\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = 10 * squareSize;\n  canvas.height = 20 * squareSize;\n  canvas.style.background = \"#bbb\";\n  const drawContext = canvas.getContext(\"2d\");\n  drawContext.fillStyle = \"#444\";\n\n  for (let r = 0; r < _constants__WEBPACK_IMPORTED_MODULE_1__.NUM_ROW; r++) {\n    for (let c = 0; c < _constants__WEBPACK_IMPORTED_MODULE_1__.NUM_COLUMN; c++) {\n      if (boardAry[r][c] === 1) {\n        drawContext.fillRect(\n          c * squareSize + 0.5,\n          r * squareSize + 0.5,\n          squareSize - 0.5,\n          squareSize - 0.5,\n        );\n      }\n    }\n  }\n\n  return canvas;\n}\n\nfunction addPlayoutView(parent, playoutObj, title, bgColorStr) {\n  const container = document.createElement(\"tr\");\n  container.style.backgroundColor = bgColorStr;\n\n  const leftPanel = document.createElement(\"td\");\n  leftPanel.classList.add(\"playout-table-left\");\n  const rightPanel = document.createElement(\"td\");\n  rightPanel.classList.add(\"playout-table-right\");\n  container.appendChild(leftPanel);\n  container.appendChild(rightPanel);\n\n  const pieces = playoutObj.pieceSequence.split(\"\");\n  let movesFormatted = [];\n  for (let i = 0; i < playoutObj.placements.length; i++) {\n    const placement = playoutObj.placements[i];\n    movesFormatted.push(\n      getNotatedMoveCpp(pieces[i], placement[0], placement[1]),\n    );\n  }\n\n  const label = document.createElement(\"span\");\n  label.innerHTML = `<strong>${title}:</strong> ${\n    playoutObj.score\n  }<br/>&nbsp;&nbsp;${movesFormatted.join(\"<br/>&nbsp;&nbsp;\")}`;\n\n  leftPanel.appendChild(label);\n\n  rightPanel.appendChild(getRenderedMiniBoard(playoutObj.resultingBoard));\n  parent.appendChild(container);\n}\n\nfunction createDetailViewCpp(parent, move, requestInfo) {\n  // Add info for the immediate result\n  const immediateInfoContainer = document.createElement(\"div\");\n  immediateInfoContainer.style.display = \"flex\";\n  immediateInfoContainer.classList.add(\"immediate-info-panel\");\n\n  // Add rendered board to the left\n  immediateInfoContainer.appendChild(getRenderedMiniBoard(move.resultingBoard));\n\n  // Add eval info to the right\n  const rightPanel = document.createElement(\"div\");\n  rightPanel.classList.add(\"immediate-info-right-panel\");\n  immediateInfoContainer.appendChild(rightPanel);\n  const evalLabel = document.createElement(\"div\");\n  evalLabel.innerHTML = `Shallow Eval Score: ${move.shallowEvalScore}`;\n  rightPanel.appendChild(evalLabel);\n  const evalExplLabel = document.createElement(\"div\");\n  evalExplLabel.innerHTML = `Eval Explanation: (not yet supported)`;\n  rightPanel.appendChild(evalExplLabel);\n\n  parent.appendChild(immediateInfoContainer);\n\n  // Add boards for each of the playouts\n  const table = document.createElement(\"table\");\n  table.classList.add(\"playout-table\");\n  addPlayoutView(table, move.playout1, \"Best Seen Playout\", \"#328532\");\n  addPlayoutView(table, move.playout2, \"Good Case\", \"#4c864c\");\n  addPlayoutView(table, move.playout3, \"Above Avg Case\", \"#6c8e6c\");\n  addPlayoutView(table, move.playout4, \"Median Case\", \"#767676\");\n  addPlayoutView(table, move.playout5, \"Below Avg Case\", \"#4e4e4e\");\n  addPlayoutView(table, move.playout6, \"Bad Case\", \"#373737\");\n  addPlayoutView(table, move.playout7, \"Worst Seen Playout\", \"#262626\");\n  parent.appendChild(table);\n}\n\nfunction toggleDetailsVisibility(detailsView) {\n  if (detailsView.style.visibility === \"visible\") {\n    detailsView.style.maxHeight = \"0px\";\n    detailsView.style.visibility = \"hidden\";\n    detailsView.style.padding = \"0\";\n  } else {\n    detailsView.style.visibility = \"visible\";\n    detailsView.style.maxHeight = \"1500px\";\n    detailsView.style.padding = \"10px 0\";\n  }\n}\n\nfunction isAnyOf(testChar, candidates) {\n  for (const loopChar of candidates) {\n    if (testChar === loopChar) {\n      return true;\n    }\n  }\n  return false;\n}\n\nconst ROTATION_LETTER_LOOKUP = {\n  I: [\"\", \"\"],\n  O: [\"\"],\n  L: [\"d\", \"l\", \"u\", \"r\"],\n  J: [\"d\", \"l\", \"u\", \"r\"],\n  T: [\"d\", \"l\", \"u\", \"r\"],\n  S: [\"\", \"\"],\n  Z: [\"\", \"\"],\n};\n\nconst PIECE_WIDTH_LOOKUP = {\n  I: [4, 1],\n  O: [2],\n  L: [3, 2, 3, 2],\n  J: [3, 2, 3, 2],\n  T: [3, 2, 3, 2],\n  S: [3, 2],\n  Z: [3, 2],\n};\n\nconst LEFTMOST_COL_LOOKUP = {\n  I: [4, 6],\n  O: [5],\n  L: [5, 5, 5, 6],\n  J: [5, 5, 5, 6],\n  T: [5, 5, 5, 6],\n  S: [5, 6],\n  Z: [5, 6],\n};\n\nfunction getNotatedMove(pieceStr, inputSequence, isSpecialMove) {\n  let rotationIndex = 0;\n  let shiftIndex = 0;\n  for (const inputChar of inputSequence) {\n    if (isAnyOf(inputChar, \"AEI\")) {\n      rotationIndex++;\n    }\n    if (isAnyOf(inputChar, \"BFG\")) {\n      rotationIndex--;\n    }\n    if (isAnyOf(inputChar, \"LEF\")) {\n      shiftIndex--;\n    }\n    if (isAnyOf(inputChar, \"RIG\")) {\n      shiftIndex++;\n    }\n  }\n\n  const finalRotation =\n    (rotationIndex + 4) % PIECE_WIDTH_LOOKUP[pieceStr].length;\n  const rotationLetter = ROTATION_LETTER_LOOKUP[pieceStr][finalRotation];\n  const leftMostCol = LEFTMOST_COL_LOOKUP[pieceStr][finalRotation] + shiftIndex;\n  let colsStr = \"\";\n  for (let i = 0; i < PIECE_WIDTH_LOOKUP[pieceStr][finalRotation]; i++) {\n    colsStr += (leftMostCol + i).toString().slice(-1);\n  }\n  return `${pieceStr}${rotationLetter}-${colsStr}${isSpecialMove ? \"*\" : \"\"}`;\n}\n\nfunction getNotatedMoveCpp(pieceStr, rotationIndex, shiftIndex) {\n  const finalRotation =\n    (rotationIndex + 4) % PIECE_WIDTH_LOOKUP[pieceStr].length;\n  const rotationLetter = ROTATION_LETTER_LOOKUP[pieceStr][finalRotation];\n  const leftMostCol = LEFTMOST_COL_LOOKUP[pieceStr][finalRotation] + shiftIndex;\n  let colsStr = \"\";\n  for (let i = 0; i < PIECE_WIDTH_LOOKUP[pieceStr][finalRotation]; i++) {\n    colsStr += (leftMostCol + i).toString().slice(-1);\n  }\n  return `${pieceStr}${rotationLetter}-${colsStr}`;\n}\n\nfunction formatDetailView(move) {\n  let displayString = `Expected Value: ${move.totalValue.toFixed(1)}`;\n\n  let evExpl = \"\";\n  for (const line of move.hypotheticalLines) {\n    evExpl += `<br/>If ${line.pieceSequence} (${(\n      line.probability * 100\n    ).toFixed(1)}%), do ${line.moveSequenceAsInputs\n      .map((x, i) => getNotatedMove(line.pieceSequence[i], x, true))\n      .join(\" \")} = ${line.resultingValue.toFixed(2)}`;\n  }\n  displayString += \"<br/>\" + evExpl;\n\n  displayString += \"<br/><br/>Base Eval Score: \" + move.evalScore.toFixed(2);\n  displayString += \"<br/>Factors:<br/>\";\n  let evalExpl = move.evalExplanation.split(\"SUBTOTAL\")[0];\n  evalExpl = evalExpl.replaceAll(/, /g, \"<br/>\");\n  displayString += evalExpl;\n  return displayString;\n}\n\nconst TEST_REQ_INFO = {\n  firstPiece: \"L\",\n  secondPiece: \"O\",\n};\nconst TESTSTRING =\n  '[{\"firstPlacement\":[3,3,11], \"playoutScore\":-40.40, \"shallowEvalScore\":-40.40, \"resultingBoard\":\"7,dadedmdChCpEpE,6\", \"playout1\":{ \"pieceSequence\":\"JLI\", \"placements\": [[3,-5,11],[2,-4,9],[1,4,16] ], \"resultingBoard\":\"11,dadehmFCFC,4\",  \"score\":64.94 }, \"playout2\":{ \"pieceSequence\":\"TIO\", \"placements\": [[3,0,7],[1,4,16],[0,0,8] ], \"resultingBoard\":\"9,bqbqdqdCdCdChCpEpE,2\",  \"score\":16.60 }, \"playout3\":{ \"pieceSequence\":\"JTJ\", \"placements\": [[3,-5,11],[3,0,7],[1,-3,8] ], \"resultingBoard\":\"7,dqhChCpCFC,8\",  \"score\":-1.44 }, \"playout4\":{ \"pieceSequence\":\"TJS\", \"placements\": [[3,0,7],[3,-5,11],[1,3,10] ], \"resultingBoard\":\"9,dqdCdCdE,7\",  \"score\":-26.43 }, \"playout5\":{ \"pieceSequence\":\"TLO\", \"placements\": [[3,0,7],[3,1,5],[0,0,4] ], \"resultingBoard\":\"5,bybydCdCdCdChCpEpE,6\",  \"score\":-49.00 }, \"playout6\":{ \"pieceSequence\":\"OLT\", \"placements\": [[0,-1,4],[1,4,11],[3,0,7] ], \"resultingBoard\":\"5,dadadqdCdCdChFpFpF,6\",  \"score\":-79.72 }, \"playout7\":{ \"pieceSequence\":\"OSS\", \"placements\": [[0,-1,4],[1,3,10],[0,-4,9] ], \"resultingBoard\":\"6,dadadadedmpEpFpE,6\",  \"score\":-155.96 } },{\"firstPlacement\":[1,4,13], \"playoutScore\":-57.46, \"shallowEvalScore\":-66.95, \"resultingBoard\":\"9,dadedmdChCpCpC,4\", \"playout1\":{ \"pieceSequence\":\"JLI\", \"placements\": [[3,-5,13],[2,-4,11],[1,4,16] ], \"resultingBoard\":\"13,dadehmFCFCFCFC,0\",  \"score\":51.74 }, \"playout2\":{ \"pieceSequence\":\"JLZ\", \"placements\": [[3,-5,13],[2,-4,11],[1,0,9] ], \"resultingBoard\":\"9,didChCFCFCFCFC,4\",  \"score\":11.93 }, \"playout3\":{ \"pieceSequence\":\"IZO\", \"placements\": [[1,4,16],[1,0,13],[0,-1,10] ], \"resultingBoard\":\"11,dadadidCdCdChCpCpC,0\",  \"score\":4.87 }, \"playout4\":{ \"pieceSequence\":\"TJZ\", \"placements\": [[3,0,9],[3,-5,13],[0,1,7] ], \"resultingBoard\":\"8,aydCdCdCdCFCFCFC,4\",  \"score\":-23.78 }, \"playout5\":{ \"pieceSequence\":\"ZOZ\", \"placements\": [[1,0,9],[0,-1,6],[1,0,7] ], \"resultingBoard\":\"7,didydydCdCdChCpCpC,4\",  \"score\":-41.39 }, \"playout6\":{ \"pieceSequence\":\"ZOL\", \"placements\": [[1,0,9],[0,-1,6],[3,3,13] ], \"resultingBoard\":\"7,dadadidCdCdChEpEpF,4\",  \"score\":-56.66 }, \"playout7\":{ \"pieceSequence\":\"OSS\", \"placements\": [[0,-1,6],[1,3,14],[1,3,13] ], \"resultingBoard\":\"8,dadadadedmdEhFpFpF,3\",  \"score\":-94.80 } },{\"firstPlacement\":[3,0,5], \"playoutScore\":-99.44, \"shallowEvalScore\":-135.25, \"resultingBoard\":\"5,aqdqdCdmdChCpCpCFC,6\", \"playout1\":{ \"pieceSequence\":\"JLI\", \"placements\": [[3,-5,10],[2,-4,8],[1,4,16] ], \"resultingBoard\":\"9,aqdqdChmFCFCFCFCFC,2\",  \"score\":-6.31 }, \"playout2\":{ \"pieceSequence\":\"ZIT\", \"placements\": [[1,-4,8],[1,4,16],[3,3,15] ], \"resultingBoard\":\"9,aqdqdChmpCpCpEpF,3\",  \"score\":-54.92 }, \"playout3\":{ \"pieceSequence\":\"SJL\", \"placements\": [[1,3,12],[3,-5,12],[2,-4,10] ], \"resultingBoard\":\"7,aqdqdChmFCFCFC,6\",  \"score\":-75.96 }, \"playout4\":{ \"pieceSequence\":\"OIJ\", \"placements\": [[0,4,11],[1,-5,10],[1,2,6] ], \"resultingBoard\":\"6,aeaudCdCdmtCxCFC,6\",  \"score\":-108.08 }, \"playout5\":{ \"pieceSequence\":\"SZL\", \"placements\": [[1,3,12],[1,-4,10],[3,1,6] ], \"resultingBoard\":\"6,aiaydCdChmpCpCpCpE,5\",  \"score\":-127.97 }, \"playout6\":{ \"pieceSequence\":\"ZTZ\", \"placements\": [[1,-4,8],[1,4,12],[1,3,12] ], \"resultingBoard\":\"7,aqdqdChmpCpDpFpF,5\",  \"score\":-136.31 }, \"playout7\":{ \"pieceSequence\":\"OSS\", \"placements\": [[0,4,11],[0,-1,4],[1,1,5] ], \"resultingBoard\":\"5,bydCdudCdmdChCpCpF,6\",  \"score\":-193.34 } },{\"firstPlacement\":[1,0,5], \"playoutScore\":-102.71, \"shallowEvalScore\":-138.62, \"resultingBoard\":\"5,bqdqdudmdChCpCpCFC,6\", \"playout1\":{ \"pieceSequence\":\"JLI\", \"placements\": [[3,-5,10],[2,-4,8],[1,4,16] ], \"resultingBoard\":\"9,bqdqduhmFCFCFCFCFC,2\",  \"score\":-9.67 }, \"playout2\":{ \"pieceSequence\":\"JLO\", \"placements\": [[3,-5,10],[2,-4,8],[0,4,11] ], \"resultingBoard\":\"7,bqdqduhmFCFCFC,6\",  \"score\":-57.33 }, \"playout3\":{ \"pieceSequence\":\"SJL\", \"placements\": [[1,3,12],[3,-5,12],[2,-4,10] ], \"resultingBoard\":\"7,bqdqduhmFCFCFC,6\",  \"score\":-79.33 }, \"playout4\":{ \"pieceSequence\":\"ZJZ\", \"placements\": [[1,1,5],[3,-5,10],[1,3,11] ], \"resultingBoard\":\"6,budCdCdmdCFCFD,7\",  \"score\":-108.58 }, \"playout5\":{ \"pieceSequence\":\"ZTZ\", \"placements\": [[1,1,5],[1,4,12],[1,1,5] ], \"resultingBoard\":\"5,aeambCdCdCdmdChCpCpD,5\",  \"score\":-126.17 }, \"playout6\":{ \"pieceSequence\":\"OZO\", \"placements\": [[0,4,11],[1,1,6],[0,4,10] ], \"resultingBoard\":\"6,budCdCdmdChFpFpF,6\",  \"score\":-135.26 }, \"playout7\":{ \"pieceSequence\":\"TOS\", \"placements\": [[1,4,12],[0,2,6],[0,1,4] ], \"resultingBoard\":\"5,amaybCdCdudmdChCpCpD,5\",  \"score\":-233.44 } },{\"firstPlacement\":[3,-5,8], \"playoutScore\":-133.85, \"shallowEvalScore\":-189.30, \"resultingBoard\":\"6,dadetmtCFCpCpCFC,6\", \"playout1\":{ \"pieceSequence\":\"TIO\", \"placements\": [[3,0,6],[1,4,16],[0,-3,11] ], \"resultingBoard\":\"10,dqdCFCFCFCpCpCFC,2\",  \"score\":-60.46 }, \"playout2\":{ \"pieceSequence\":\"ITI\", \"placements\": [[1,4,16],[3,0,10],[1,3,14] ], \"resultingBoard\":\"10,dqdCtCtCFEpEpE,3\",  \"score\":-92.26 }, \"playout3\":{ \"pieceSequence\":\"ISL\", \"placements\": [[1,4,16],[1,3,16],[3,-4,13] ], \"resultingBoard\":\"12,daleBmFCFCpCpE,1\",  \"score\":-121.28 }, \"playout4\":{ \"pieceSequence\":\"OTL\", \"placements\": [[0,-3,7],[1,4,12],[1,4,11] ], \"resultingBoard\":\"9,dadeFmFDpDpD,5\",  \"score\":-136.55 }, \"playout5\":{ \"pieceSequence\":\"SLT\", \"placements\": [[1,3,12],[3,-4,9],[3,3,11] ], \"resultingBoard\":\"9,daleBmFEpEpE,5\",  \"score\":-157.09 }, \"playout6\":{ \"pieceSequence\":\"ZOL\", \"placements\": [[1,0,6],[0,4,11],[3,-4,8] ], \"resultingBoard\":\"7,dilCBCFCFCpCpF,6\",  \"score\":-177.40 }, \"playout7\":{ \"pieceSequence\":\"OJS\", \"placements\": [[0,-3,7],[1,4,11],[0,1,6] ], \"resultingBoard\":\"7,dmdCFmFCFCpDpD,6\",  \"score\":-204.61 } },{\"firstPlacement\":[3,1,4], \"playoutScore\":-142.74, \"shallowEvalScore\":-175.63, \"resultingBoard\":\"4,aiaidmdedmdChCpCpCFC,6\", \"playout1\":{ \"pieceSequence\":\"JLI\", \"placements\": [[3,-5,10],[2,-4,8],[1,4,16] ], \"resultingBoard\":\"8,aiaidmdehmFCFCFCFCFC,2\",  \"score\":-46.68 }, \"playout2\":{ \"pieceSequence\":\"JOL\", \"placements\": [[3,-5,10],[0,-3,7],[1,4,13] ], \"resultingBoard\":\"7,aiaidmdepmpCFCFCFC,4\",  \"score\":-98.18 }, \"playout3\":{ \"pieceSequence\":\"ISO\", \"placements\": [[1,4,16],[1,3,16],[0,4,15] ], \"resultingBoard\":\"10,aiaidmdedmdChFpFpE,1\",  \"score\":-112.22 }, \"playout4\":{ \"pieceSequence\":\"TLI\", \"placements\": [[1,4,12],[1,2,5],[1,0,7] ], \"resultingBoard\":\"5,amamaCdCdudCdChCpCpD,5\",  \"score\":-135.00 }, \"playout5\":{ \"pieceSequence\":\"STS\", \"placements\": [[1,3,12],[3,3,11],[1,3,9] ], \"resultingBoard\":\"6,aiaidmdgdpdFhFpEpE,5\",  \"score\":-173.43 }, \"playout6\":{ \"pieceSequence\":\"ZOZ\", \"placements\": [[1,-4,8],[0,4,11],[1,3,10] ], \"resultingBoard\":\"5,aiaidmdehmpDpFpEpF,6\",  \"score\":-185.41 }, \"playout7\":{ \"pieceSequence\":\"OSS\", \"placements\": [[0,4,11],[1,1,3],[1,-2,4] ], \"resultingBoard\":\"3,aicmdmbidmdedmdChCpCpF,6\",  \"score\":-348.30 } },{\"firstPlacement\":[0,-2,4], \"playoutScore\":-146.11, \"shallowEvalScore\":-183.27, \"resultingBoard\":\"5,hahadedmdChCpCpCFC,6\", \"playout1\":{ \"pieceSequence\":\"ZIT\", \"placements\": [[1,-4,8],[1,4,16],[3,-4,10] ], \"resultingBoard\":\"9,hapapepmpCpCpCpCFC,2\",  \"score\":-27.91 }, \"playout2\":{ \"pieceSequence\":\"ZLI\", \"placements\": [[1,-4,8],[1,4,13],[1,-5,12] ], \"resultingBoard\":\"8,hahadehmFCFCFCFC,4\",  \"score\":-100.75 }, \"playout3\":{ \"pieceSequence\":\"ZTZ\", \"placements\": [[1,-4,8],[3,-4,6],[1,0,6] ], \"resultingBoard\":\"5,hapipCpCpCpCpCpCFC,6\",  \"score\":-123.17 }, \"playout4\":{ \"pieceSequence\":\"ISO\", \"placements\": [[1,4,16],[1,3,16],[0,-1,8] ], \"resultingBoard\":\"9,dadahahadedmdChCpCpE,1\",  \"score\":-153.48 }, \"playout5\":{ \"pieceSequence\":\"SOZ\", \"placements\": [[1,3,12],[0,-1,4],[1,-4,10] ], \"resultingBoard\":\"5,dadahahadehmpCpCpCpE,5\",  \"score\":-169.12 }, \"playout6\":{ \"pieceSequence\":\"STS\", \"placements\": [[1,3,12],[3,0,8],[1,0,6] ], \"resultingBoard\":\"6,aqhyhydCdCdChCpCpE,5\",  \"score\":-187.69 }, \"playout7\":{ \"pieceSequence\":\"OSS\", \"placements\": [[0,4,11],[0,-2,3],[0,1,6] ], \"resultingBoard\":\"4,dagahahmdCdmdChCpCpF,6\",  \"score\":-322.45 } },{\"firstPlacement\":[0,1,5], \"playoutScore\":-147.18, \"shallowEvalScore\":-169.74, \"resultingBoard\":\"6,dCdudmdChCpCpCFC,6\", \"playout1\":{ \"pieceSequence\":\"JIO\", \"placements\": [[3,-5,10],[1,4,16],[0,-3,11] ], \"resultingBoard\":\"10,dCdupmpCFCFCFCFC,2\",  \"score\":-48.99 }, \"playout2\":{ \"pieceSequence\":\"IZL\", \"placements\": [[1,4,16],[1,3,15],[2,1,8] ], \"resultingBoard\":\"8,aeaCdCdudmdChCpDpF,3\",  \"score\":-98.94 }, \"playout3\":{ \"pieceSequence\":\"JTJ\", \"placements\": [[3,-5,10],[1,4,12],[1,-3,9] ], \"resultingBoard\":\"8,dChuhmpCFCFCFD,5\",  \"score\":-124.55 }, \"playout4\":{ \"pieceSequence\":\"OIJ\", \"placements\": [[0,4,11],[1,-5,10],[3,3,11] ], \"resultingBoard\":\"8,dCdudmtFxE,7\",  \"score\":-154.61 }, \"playout5\":{ \"pieceSequence\":\"STO\", \"placements\": [[1,3,12],[3,3,11],[0,4,8] ], \"resultingBoard\":\"8,dCdxdpdEhFpEpE,5\",  \"score\":-172.21 }, \"playout6\":{ \"pieceSequence\":\"ZOZ\", \"placements\": [[1,-4,8],[0,4,11],[1,3,10] ], \"resultingBoard\":\"7,dCduhmpDpFpEpF,6\",  \"score\":-183.74 }, \"playout7\":{ \"pieceSequence\":\"OSS\", \"placements\": [[0,4,11],[1,3,10],[0,-4,9] ], \"resultingBoard\":\"8,dCdudmpEpDpF,6\",  \"score\":-237.36 } }]';\n\n\n//# sourceURL=webpack://tetrisjs/./src/engine_analysis_manager.js?");

/***/ }),

/***/ "./src/fullscreen.js":
/*!***************************!*\
  !*** ./src/fullscreen.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fullscreen: () => (/* binding */ fullscreen)\n/* harmony export */ });\nconst fullscreen = {\n  available: () =>\n    document.fullscreenEnabled || document.webkitFullscreenEnabled,\n  enabled: () =>\n    document.fullscreenElement != null ||\n    document.webkitFullscreenElement != null,\n  enter: (el) => {\n    if (el.requestFullscreen) {\n      el.requestFullscreen({ navigationUI: \"hide\" });\n    } else if (el.webkitRequestFullScreen) {\n      el.webkitRequestFullScreen();\n    }\n  },\n  exit: () => {\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    }\n  },\n  change: (callback) => {\n    document.addEventListener(\n      \"fullscreenchange\",\n      function () {\n        callback();\n      },\n      false,\n    );\n\n    document.addEventListener(\n      \"webkitfullscreenchange\",\n      function () {\n        callback();\n      },\n      false,\n    );\n  },\n};\n\n\n//# sourceURL=webpack://tetrisjs/./src/fullscreen.js?");

/***/ }),

/***/ "./src/game_settings_manager.js":
/*!**************************************!*\
  !*** ./src/game_settings_manager.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GetDASUnchargedFloor: () => (/* binding */ GetDASUnchargedFloor),\n/* harmony export */   getDASChargeAfterTap: () => (/* binding */ getDASChargeAfterTap),\n/* harmony export */   getDASChargedFloor: () => (/* binding */ getDASChargedFloor),\n/* harmony export */   getDASTriggerThreshold: () => (/* binding */ getDASTriggerThreshold),\n/* harmony export */   getDASWallChargeAmount: () => (/* binding */ getDASWallChargeAmount),\n/* harmony export */   getFrameSkipCount: () => (/* binding */ getFrameSkipCount),\n/* harmony export */   getGameSpeedMultiplier: () => (/* binding */ getGameSpeedMultiplier),\n/* harmony export */   getPieceSequence: () => (/* binding */ getPieceSequence),\n/* harmony export */   getStartingBoardType: () => (/* binding */ getStartingBoardType),\n/* harmony export */   getStartingLevel: () => (/* binding */ getStartingLevel),\n/* harmony export */   isDASAlwaysCharged: () => (/* binding */ isDASAlwaysCharged),\n/* harmony export */   shouldReduceLongBars: () => (/* binding */ shouldReduceLongBars),\n/* harmony export */   shouldSetDASChargeOnPieceStart: () => (/* binding */ shouldSetDASChargeOnPieceStart),\n/* harmony export */   shouldShowDiggingHints: () => (/* binding */ shouldShowDiggingHints),\n/* harmony export */   shouldShowParityHints: () => (/* binding */ shouldShowParityHints),\n/* harmony export */   shouldTransitionEvery10Lines: () => (/* binding */ shouldTransitionEvery10Lines),\n/* harmony export */   shouldTransitionEveryLine: () => (/* binding */ shouldTransitionEveryLine)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./src/constants.js\");\n\n\nconst Ui = __webpack_require__(/*! ./game_settings_ui_manager */ \"./src/game_settings_ui_manager.js\");\n\n/* ------ LEVEL TRANSITIONS -------- */\n\nfunction shouldTransitionEvery10Lines() {\n  return Ui.getTransition10Lines();\n}\n\nfunction shouldTransitionEveryLine() {\n  return false;\n}\n\nfunction getStartingLevel() {\n  return Ui.getStartingLevel();\n}\n\n/* -------- GAMEPLAY --------- */\n\nfunction shouldShowDiggingHints() {\n  return Ui.getDiggingHintsEnabled();\n}\n\nfunction shouldShowParityHints() {\n  return Ui.getParityHintsEnabled();\n}\n\nfunction getGameSpeedMultiplier() {\n  return Ui.getGameSpeedMultiplier();\n}\n\n// e.g. if game at half speed, skip every other frame\nfunction getFrameSkipCount() {\n  return Math.round(1 / Ui.getGameSpeedMultiplier());\n}\n\nfunction shouldReduceLongBars() {\n  return Ui.getDroughtModeEnabled();\n}\n\nfunction getPieceSequence() {\n  return Ui.getPieceSequence();\n}\n\nfunction getStartingBoardType() {\n  return Ui.getStartingBoardType();\n}\n\n/* --------- DAS --------- */\n\nfunction shouldSetDASChargeOnPieceStart() {\n  const dasBehavior = Ui.getDASBehavior();\n  return (\n    dasBehavior == _constants__WEBPACK_IMPORTED_MODULE_0__.DASBehavior.ALWAYS_CHARGED ||\n    dasBehavior == _constants__WEBPACK_IMPORTED_MODULE_0__.DASBehavior.CHARGE_ON_PIECE_SPAWN\n  );\n}\n\nfunction isDASAlwaysCharged() {\n  return Ui.getDASBehavior() == _constants__WEBPACK_IMPORTED_MODULE_0__.DASBehavior.ALWAYS_CHARGED;\n}\n\nfunction getDASChargeAfterTap() {\n  // If DAS is set to 'always charged', set it to the charged floor (to avoid double shifts)\n  if (Ui.getDASBehavior() == _constants__WEBPACK_IMPORTED_MODULE_0__.DASBehavior.ALWAYS_CHARGED) {\n    return getDASChargedFloor();\n  }\n  // Otherwise, DAS loses its charge on tap\n  else {\n    return GetDASUnchargedFloor();\n  }\n}\n\n/** Gets the DAS value set on wall charge, or maybe on piece spawn (depending on the DAS behavior setting) */\nfunction getDASWallChargeAmount() {\n  switch (Ui.getDASSpeed()) {\n    // For the DAS speeds that are in between whole number frames (e.g slower than 4F but faster than 5F),\n    // give them a worse DAS charge on every wallcharge and piece spawn\n    case _constants__WEBPACK_IMPORTED_MODULE_0__.DASSpeed.SLOW_MEDIUM:\n      return getDASChargedFloor() + 2;\n    case _constants__WEBPACK_IMPORTED_MODULE_0__.DASSpeed.FAST:\n      return getDASChargedFloor();\n    default:\n      // All other speeds have DAS auto-wall-charged on piece spawn\n      return getDASTriggerThreshold();\n  }\n}\n\nfunction getDASChargedFloor() {\n  return 10;\n}\n\nfunction GetDASUnchargedFloor() {\n  return 0;\n}\n\nfunction getDASTriggerThreshold() {\n  let ARR;\n  const dasSpeed = Ui.getDASSpeed();\n  switch (dasSpeed) {\n    case _constants__WEBPACK_IMPORTED_MODULE_0__.DASSpeed.STANDARD:\n      ARR = 6;\n      break;\n    case _constants__WEBPACK_IMPORTED_MODULE_0__.DASSpeed.FAST:\n    case _constants__WEBPACK_IMPORTED_MODULE_0__.DASSpeed.FASTDAS:\n      ARR = 4;\n      break;\n    case _constants__WEBPACK_IMPORTED_MODULE_0__.DASSpeed.SLOW_MEDIUM:\n    case _constants__WEBPACK_IMPORTED_MODULE_0__.DASSpeed.MEDIUM:\n      ARR = 5;\n      break;\n    default:\n      throw new Error(\"Unknown DAS speed: \" + dasSpeed);\n  }\n  return getDASChargedFloor() + ARR;\n}\n\n\n//# sourceURL=webpack://tetrisjs/./src/game_settings_manager.js?");

/***/ }),

/***/ "./src/game_settings_presets.js":
/*!**************************************!*\
  !*** ./src/game_settings_presets.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CUSTOM_SEQUENCE_PRESET: () => (/* binding */ CUSTOM_SEQUENCE_PRESET),\n/* harmony export */   DIG_PRACTICE_PRESET: () => (/* binding */ DIG_PRACTICE_PRESET),\n/* harmony export */   DROUGHT_PRESET: () => (/* binding */ DROUGHT_PRESET),\n/* harmony export */   EDIT_BOARD_PRESET: () => (/* binding */ EDIT_BOARD_PRESET),\n/* harmony export */   KILLSCREEN_PRESET: () => (/* binding */ KILLSCREEN_PRESET),\n/* harmony export */   SITE_DEFAULTS: () => (/* binding */ SITE_DEFAULTS),\n/* harmony export */   SLOW_19_PRESET: () => (/* binding */ SLOW_19_PRESET),\n/* harmony export */   SLOW_KILLSCREEN_PRESET: () => (/* binding */ SLOW_KILLSCREEN_PRESET),\n/* harmony export */   STANDARD_PRESET: () => (/* binding */ STANDARD_PRESET),\n/* harmony export */   STANDARD_TAPPER_PRESET: () => (/* binding */ STANDARD_TAPPER_PRESET),\n/* harmony export */   SettingType: () => (/* binding */ SettingType)\n/* harmony export */ });\nconst { DASSpeed, StartingBoardType, DASBehavior } = __webpack_require__(/*! ./constants */ \"./src/constants.js\");\n\nconst SettingType = Object.freeze({\n  REQUIRED: \"required\",\n  DEFAULT: \"default\",\n  NONE: \"none\",\n});\n\nconst SITE_DEFAULTS = Object.freeze({\n  DASSpeed: DASSpeed.STANDARD,\n  DASBehavior: DASBehavior.STANDARD,\n  DroughtModeEnabled: false,\n  DiggingHintsEnabled: false,\n  GameSpeedMultiplier: 1,\n  ParityHintsEnabled: false,\n  PieceSequence: \"\",\n  Transition10Lines: false,\n  StartingBoardType: StartingBoardType.EMPTY,\n  StartingLevel: 18,\n});\n\n// No overrides\nconst STANDARD_PRESET = {};\n\nconst STANDARD_TAPPER_PRESET = {\n  DASSpeed: {\n    type: SettingType.DEFAULT,\n    value: DASSpeed.MEDIUM,\n  },\n  DASBehavior: {\n    type: SettingType.DEFAULT,\n    value: DASBehavior.CHARGE_ON_PIECE_SPAWN,\n  },\n};\n\nconst DIG_PRACTICE_PRESET = {\n  DiggingHintsEnabled: {\n    type: SettingType.DEFAULT,\n    value: true,\n  },\n  StartingBoardType: {\n    type: SettingType.REQUIRED,\n    value: StartingBoardType.DIG_PRACTICE,\n  },\n};\n\nconst KILLSCREEN_PRESET = {\n  StartingLevel: {\n    type: SettingType.REQUIRED,\n    value: 29,\n  },\n  DASSpeed: {\n    type: SettingType.DEFAULT,\n    value: DASSpeed.MEDIUM,\n  },\n  DASBehavior: {\n    type: SettingType.DEFAULT,\n    value: DASBehavior.CHARGE_ON_PIECE_SPAWN,\n  },\n};\n\nconst SLOW_KILLSCREEN_PRESET = {\n  GameSpeedMultiplier: {\n    type: SettingType.DEFAULT,\n    value: 0.5,\n  },\n  StartingLevel: {\n    type: SettingType.REQUIRED,\n    value: 29,\n  },\n  DASSpeed: {\n    type: SettingType.DEFAULT,\n    value: DASSpeed.MEDIUM,\n  },\n  DASBehavior: {\n    type: SettingType.DEFAULT,\n    value: DASBehavior.CHARGE_ON_PIECE_SPAWN,\n  },\n};\n\nconst SLOW_19_PRESET = {\n  GameSpeedMultiplier: {\n    type: SettingType.DEFAULT,\n    value: 0.5,\n  },\n  StartingLevel: {\n    type: SettingType.REQUIRED,\n    value: 19,\n  },\n  Transition10Lines: {\n    type: SettingType.REQUIRED,\n    value: true,\n  },\n  DASBehavior: {\n    type: SettingType.DEFAULT,\n    value: DASBehavior.CHARGE_ON_PIECE_SPAWN,\n  },\n};\n\nconst DROUGHT_PRESET = {\n  DroughtModeEnabled: {\n    type: SettingType.REQUIRED,\n    value: true,\n  },\n};\n\nconst EDIT_BOARD_PRESET = {\n  StartingBoardType: {\n    type: SettingType.REQUIRED,\n    value: StartingBoardType.CUSTOM,\n  },\n};\n\nconst CUSTOM_SEQUENCE_PRESET = {\n  PieceSequence: {\n    type: SettingType.DEFAULT,\n    value: \"\",\n  },\n};\n\n\n//# sourceURL=webpack://tetrisjs/./src/game_settings_presets.js?");

/***/ }),

/***/ "./src/game_settings_ui_manager.js":
/*!*****************************************!*\
  !*** ./src/game_settings_ui_manager.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDASBehavior: () => (/* binding */ getDASBehavior),\n/* harmony export */   getDASSpeed: () => (/* binding */ getDASSpeed),\n/* harmony export */   getDiggingHintsEnabled: () => (/* binding */ getDiggingHintsEnabled),\n/* harmony export */   getDroughtModeEnabled: () => (/* binding */ getDroughtModeEnabled),\n/* harmony export */   getGameSpeedMultiplier: () => (/* binding */ getGameSpeedMultiplier),\n/* harmony export */   getParityHintsEnabled: () => (/* binding */ getParityHintsEnabled),\n/* harmony export */   getPieceSequence: () => (/* binding */ getPieceSequence),\n/* harmony export */   getStartingBoardType: () => (/* binding */ getStartingBoardType),\n/* harmony export */   getStartingLevel: () => (/* binding */ getStartingLevel),\n/* harmony export */   getTransition10Lines: () => (/* binding */ getTransition10Lines),\n/* harmony export */   loadPreset: () => (/* binding */ loadPreset)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./src/constants.js\");\n/* harmony import */ var _fullscreen__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fullscreen */ \"./src/fullscreen.js\");\n/* harmony import */ var _game_settings_presets__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./game_settings_presets */ \"./src/game_settings_presets.js\");\n\n\n\n\nconst dasSpeedDropdown = document.getElementById(\"das-speed-dropdown\");\nconst dasBehaviorDropdown = document.getElementById(\"das-behavior-dropdown\");\nconst gameSpeedDropdown = document.getElementById(\"game-speed-dropdown\");\nconst startingBoardDropdown = document.getElementById(\"starting-board\");\nconst droughtCheckbox = document.getElementById(\"drought-checkbox\");\nconst diggingHintsCheckbox = document.getElementById(\"digging-hints-checkbox\");\nconst parityHintsCheckbox = document.getElementById(\"parity-hints-checkbox\");\nconst transition10Checkbox = document.getElementById(\"transition-10-checkbox\");\nconst pieceSequenceText = document.getElementById(\"piece-sequence\");\nconst levelSelectElement = document.getElementById(\"level-select\");\nconst fullscreenCheckbox = document.getElementById(\"fullscreen-checkbox\");\n\nconst playerSettings = getUserPreferencesFromCookie();\n\n/* List of DAS speeds in order that they're listed in the UI dropdown.\n   This essentially acts as a lookup table because the <option>s in the HTML have \n   value according to the index here. \n   e.g. value=\"2\" maps to index 2, etc. */\nconst DAS_SPEED_LIST = [\n  _constants__WEBPACK_IMPORTED_MODULE_0__.DASSpeed.STANDARD,\n  _constants__WEBPACK_IMPORTED_MODULE_0__.DASSpeed.SLOW_MEDIUM,\n  _constants__WEBPACK_IMPORTED_MODULE_0__.DASSpeed.MEDIUM,\n  _constants__WEBPACK_IMPORTED_MODULE_0__.DASSpeed.FAST,\n  _constants__WEBPACK_IMPORTED_MODULE_0__.DASSpeed.FASTDAS,\n];\n\n/* List of DAS charging behaviors in order that they're listed in the UI dropdown.\n     This essentially acts as a lookup table because the <option>s in the HTML have \n     value according to the index here. \n     e.g. value=\"2\" maps to index 2, etc. */\nconst DAS_BEHAVIOR_LIST = [\n  _constants__WEBPACK_IMPORTED_MODULE_0__.DASBehavior.STANDARD,\n  _constants__WEBPACK_IMPORTED_MODULE_0__.DASBehavior.ALWAYS_CHARGED,\n  _constants__WEBPACK_IMPORTED_MODULE_0__.DASBehavior.CHARGE_ON_PIECE_SPAWN,\n];\n\n/* List of starting board types in order that they're listed in the UI dropdown. */\nconst STARTING_BOARD_LIST = [\n  _constants__WEBPACK_IMPORTED_MODULE_0__.StartingBoardType.EMPTY,\n  _constants__WEBPACK_IMPORTED_MODULE_0__.StartingBoardType.DIG_PRACTICE,\n  _constants__WEBPACK_IMPORTED_MODULE_0__.StartingBoardType.CUSTOM,\n];\n\nfunction saveUserPreferencesToCookie() {\n  document.cookie =\n    \"userPrefs=\" +\n    escape(JSON.stringify(playerSettings)) +\n    \"; expires=Thu, 18 Dec 2030 12:00:00 UTC\";\n  console.log(\"cookie:\", document.cookie);\n}\n\nfunction getUserPreferencesFromCookie() {\n  if (document.cookie) {\n    console.log(\"cookie:\", document.cookie);\n    const firstCookie = document.cookie.split(\";\")[0];\n    const userPrefsCookie = document.cookie\n      .split(\"; \")\n      .find((row) => row.startsWith(\"userPrefs=\"));\n    const userPrefsCookieValue =\n      userPrefsCookie && userPrefsCookie.split(\"=\")[1];\n\n    return JSON.parse(unescape(userPrefsCookieValue || firstCookie));\n  }\n  return JSON.parse(JSON.stringify(_game_settings_presets__WEBPACK_IMPORTED_MODULE_2__.SITE_DEFAULTS));\n}\n\nfunction onLevelChanged() {\n  // Select the button corresponding to the current level, if there is one\n  for (const button of document.getElementById(\"level-choice-buttons\")\n    .children) {\n    if (button.id.split(\"-\")[1] === levelSelectElement.value) {\n      button.classList.add(\"selected\");\n    } else {\n      button.classList.remove(\"selected\");\n    }\n  }\n}\n\nfunction addOnChangeListeners() {\n  // When user changes a preference manually, associate it with their user cookie so the preference is remembered\n  dasSpeedDropdown.addEventListener(\"change\", (e) => {\n    playerSettings[\"DASSpeed\"] = getDASSpeed();\n    saveUserPreferencesToCookie();\n  });\n  dasBehaviorDropdown.addEventListener(\"change\", (e) => {\n    playerSettings[\"DASBehavior\"] = getDASBehavior();\n    saveUserPreferencesToCookie();\n  });\n  diggingHintsCheckbox.addEventListener(\"change\", (e) => {\n    playerSettings[\"DiggingHintsEnabled\"] = getDiggingHintsEnabled();\n    saveUserPreferencesToCookie();\n  });\n  parityHintsCheckbox.addEventListener(\"change\", (e) => {\n    playerSettings[\"ParityHintsEnabled\"] = getParityHintsEnabled();\n    saveUserPreferencesToCookie();\n  });\n\n  if (_fullscreen__WEBPACK_IMPORTED_MODULE_1__.fullscreen.available()) {\n    fullscreenCheckbox.disabled = false;\n\n    fullscreenCheckbox.onchange = () => {\n      if (_fullscreen__WEBPACK_IMPORTED_MODULE_1__.fullscreen.enabled()) {\n        _fullscreen__WEBPACK_IMPORTED_MODULE_1__.fullscreen.exit();\n        fullscreenCheckbox.checked = false;\n      } else {\n        let gameContainer = document.querySelector(\"#game-container\");\n        if (gameContainer) {\n          console.log(\"enable sullsce\");\n          _fullscreen__WEBPACK_IMPORTED_MODULE_1__.fullscreen.enter(gameContainer);\n          fullscreenCheckbox.checked = true;\n        }\n      }\n    };\n\n    _fullscreen__WEBPACK_IMPORTED_MODULE_1__.fullscreen.change(() => {\n      fullscreenCheckbox.checked = _fullscreen__WEBPACK_IMPORTED_MODULE_1__.fullscreen.enabled() ? true : false;\n    });\n  }\n\n  // Also update the level select buttons\n  levelSelectElement.addEventListener(\"change\", (e) => {\n    onLevelChanged();\n  });\n}\naddOnChangeListeners();\n\n// Assign on click listeners, e.g. #level-0 sets it to 0.\n[0, 5, 8, 9, 15, 18, 19, 29].forEach((num) => {\n  document.getElementById(\"level-\" + num).addEventListener(\"click\", (e) => {\n    levelSelectElement.value = num;\n    onLevelChanged();\n\n    // Update the starting level in cookies\n    playerSettings[\"StartingLevel\"] = getStartingLevel();\n    saveUserPreferencesToCookie();\n  });\n});\n\nfunction setSetting(settingName, value) {\n  switch (settingName) {\n    case \"DASSpeed\":\n      dasSpeedDropdown.value = DAS_SPEED_LIST.findIndex((x) => x == value);\n      break;\n    case \"DASBehavior\":\n      dasBehaviorDropdown.value = DAS_BEHAVIOR_LIST.findIndex(\n        (x) => x == value,\n      );\n      break;\n    case \"DroughtModeEnabled\":\n      droughtCheckbox.checked = value;\n      break;\n    case \"DiggingHintsEnabled\":\n      diggingHintsCheckbox.checked = value;\n      break;\n    case \"GameSpeedMultiplier\":\n      gameSpeedDropdown.value = value;\n      break;\n    case \"ParityHintsEnabled\":\n      parityHintsCheckbox.checked = value;\n      break;\n    case \"PieceSequence\":\n      pieceSequenceText.value = value;\n      break;\n    case \"Transition10Lines\":\n      transition10Checkbox.checked = value;\n      break;\n    case \"StartingBoardType\":\n      startingBoardDropdown.value = STARTING_BOARD_LIST.findIndex(\n        (x) => x == value,\n      );\n      break;\n    case \"StartingLevel\":\n      levelSelectElement.value = value;\n      onLevelChanged();\n      break;\n  }\n}\n\nfunction getStartingLevel() {\n  const tempLevel = parseInt(levelSelectElement.value);\n  return Math.max(tempLevel, 0);\n}\n\nfunction getTransition10Lines() {\n  return transition10Checkbox.checked;\n}\n\nfunction getDroughtModeEnabled() {\n  return droughtCheckbox.checked;\n}\n\nfunction getDiggingHintsEnabled() {\n  return diggingHintsCheckbox.checked;\n}\n\nfunction getParityHintsEnabled() {\n  return parityHintsCheckbox.checked;\n}\n\nfunction getGameSpeedMultiplier() {\n  return gameSpeedDropdown.value;\n}\n\nfunction getDASSpeed() {\n  const speedIndex = parseInt(dasSpeedDropdown.value);\n  return DAS_SPEED_LIST[speedIndex];\n}\n\nfunction getDASBehavior() {\n  const behaviorIndex = parseInt(dasBehaviorDropdown.value);\n  return DAS_BEHAVIOR_LIST[behaviorIndex];\n}\n\nfunction getPieceSequence() {\n  const sequenceRaw = pieceSequenceText.value;\n  const allCaps = sequenceRaw.toUpperCase();\n  let cleansedStr = \"\";\n  for (const char of allCaps) {\n    if ([\"I\", \"O\", \"L\", \"J\", \"T\", \"S\", \"Z\"].includes(char)) {\n      cleansedStr += char;\n    }\n  }\n  return cleansedStr;\n}\n\nfunction getStartingBoardType() {\n  return STARTING_BOARD_LIST[startingBoardDropdown.value];\n}\n\n/* ---------- PRESETS ----------- */\n\nfunction loadPreset(presetObj) {\n  const settingsList = [\n    [\"DASSpeed\", dasSpeedDropdown],\n    [\"DASBehavior\", dasBehaviorDropdown],\n    [\"DroughtModeEnabled\", droughtCheckbox],\n    [\"DiggingHintsEnabled\", diggingHintsCheckbox],\n    [\"GameSpeedMultiplier\", gameSpeedDropdown],\n    [\"ParityHintsEnabled\", parityHintsCheckbox],\n    [\"PieceSequence\", pieceSequenceText],\n    [\"Transition10Lines\", transition10Checkbox],\n    [\"StartingBoardType\", startingBoardDropdown],\n    [\"StartingLevel\", levelSelectElement],\n  ];\n\n  for (const entry of settingsList) {\n    const key = entry[0];\n    const inputElement = entry[1];\n    const containerToHighlight =\n      key == \"StartingLevel\"\n        ? inputElement.parentElement\n        : inputElement.parentElement.parentElement;\n    const containerToDisable = inputElement.parentElement.parentElement;\n    if (key in presetObj) {\n      // Specified in the preset\n      setSetting(key, presetObj[key].value);\n\n      // Highlight that section to indicate it was changed by the preset\n      containerToHighlight.classList.add(\"selected-row\");\n      if (presetObj[key].type == _game_settings_presets__WEBPACK_IMPORTED_MODULE_2__.SettingType.REQUIRED) {\n        containerToDisable.classList.add(\"disabled-row\");\n      }\n    } else {\n      // Not specified in the preset\n      setSetting(key, playerSettings[key]);\n\n      // Remove any highlights on that section\n      containerToHighlight.classList.remove(\"selected-row\");\n      containerToDisable.classList.remove(\"disabled-row\");\n    }\n  }\n}\n\n\n//# sourceURL=webpack://tetrisjs/./src/game_settings_ui_manager.js?");

/***/ }),

/***/ "./src/history_manager.js":
/*!********************************!*\
  !*** ./src/history_manager.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HistoryManager: () => (/* binding */ HistoryManager)\n/* harmony export */ });\n/**\n * A manager class that stores a snapshot of the game every time a piece locks.\n * This allows the player to rewind the game if they make a mistake.\n */\n\nfunction HistoryManager() {\n  this.history = [];\n  this.readIndex = -1;\n}\n\nHistoryManager.prototype.addSnapshotToHistory = function (snapshotObj) {\n  this.readIndex += 1;\n  this.history[this.readIndex] = snapshotObj;\n};\n\nHistoryManager.prototype.rewindOnePiece = function () {\n  this.readIndex -= 1;\n  this.readIndex = Math.max(0, this.readIndex);\n};\n\nHistoryManager.prototype.fastForwardOnePiece = function () {\n  this.readIndex += 1;\n  this.readIndex = Math.min(this.readIndex, this.history.length - 1);\n};\n\nHistoryManager.prototype.loadSnapshotFromHistory = function () {\n  if (this.readIndex >= this.history.length) {\n    return null;\n  }\n  return this.history[this.readIndex];\n};\n\nHistoryManager.prototype.resetHistory = function () {\n  this.history = [];\n  this.readIndex = -1;\n};\n\n\n//# sourceURL=webpack://tetrisjs/./src/history_manager.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   G_FastForward: () => (/* binding */ G_FastForward),\n/* harmony export */   G_GetGameState: () => (/* binding */ G_GetGameState),\n/* harmony export */   G_MoveCurrentPieceDown: () => (/* binding */ G_MoveCurrentPieceDown),\n/* harmony export */   G_MovePieceLeft: () => (/* binding */ G_MovePieceLeft),\n/* harmony export */   G_MovePieceRight: () => (/* binding */ G_MovePieceRight),\n/* harmony export */   G_Quit: () => (/* binding */ G_Quit),\n/* harmony export */   G_Restart: () => (/* binding */ G_Restart),\n/* harmony export */   G_Rewind: () => (/* binding */ G_Rewind),\n/* harmony export */   G_RotatePieceLeft: () => (/* binding */ G_RotatePieceLeft),\n/* harmony export */   G_RotatePieceRight: () => (/* binding */ G_RotatePieceRight),\n/* harmony export */   G_StartPause: () => (/* binding */ G_StartPause),\n/* harmony export */   GetCurrentPiece: () => (/* binding */ GetCurrentPiece),\n/* harmony export */   GetIsPaused: () => (/* binding */ GetIsPaused),\n/* harmony export */   GetLevel: () => (/* binding */ GetLevel),\n/* harmony export */   GetLines: () => (/* binding */ GetLines),\n/* harmony export */   calcParity: () => (/* binding */ calcParity)\n/* harmony export */ });\n/* harmony import */ var _piece_selector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./piece_selector.js */ \"./src/piece_selector.js\");\n/* harmony import */ var _board_loader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./board_loader.js */ \"./src/board_loader.js\");\n/* harmony import */ var _canvas_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./canvas.js */ \"./src/canvas.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ \"./src/constants.js\");\n/* harmony import */ var _piece_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./piece.js */ \"./src/piece.js\");\n/* harmony import */ var _input_manager_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./input_manager.js */ \"./src/input_manager.js\");\n/* harmony import */ var _board_edit_manager_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./board_edit_manager.js */ \"./src/board_edit_manager.js\");\n/* harmony import */ var _board_generator_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./board_generator.js */ \"./src/board_generator.js\");\n/* harmony import */ var _history_manager_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./history_manager.js */ \"./src/history_manager.js\");\n/* harmony import */ var _engine_analysis_manager_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./engine_analysis_manager.js */ \"./src/engine_analysis_manager.js\");\n/* harmony import */ var _ui_manager__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ui_manager */ \"./src/ui_manager.js\");\n/* harmony import */ var _game_settings_presets_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./game_settings_presets.js */ \"./src/game_settings_presets.js\");\n/* harmony import */ var _tetrominoes_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./tetrominoes.js */ \"./src/tetrominoes.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst GameSettings = __webpack_require__(/*! ./game_settings_manager */ \"./src/game_settings_manager.js\");\nconst GameSettingsUi = __webpack_require__(/*! ./game_settings_ui_manager */ \"./src/game_settings_ui_manager.js\");\n\nconst headerTextElement = document.getElementById(\"header-text\");\nconst preGameConfigDiv = document.getElementById(\"pre-game-config\");\nconst randomBoardResetButton = document.getElementById(\n  \"random-board-reset-button\",\n);\nconst mainCanvas = document.getElementById(\"main-canvas\");\nconst centerPanel = document.getElementById(\"center-panel\");\n\n// Set up system theme detection\nconst prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\nlet hudColor = prefersDark && prefersDark.matches ? \"white\" : \"black\";\n\nprefersDark.addEventListener(\"change\", function (e) {\n  hudColor = e.matches ? \"white\" : \"black\";\n  refreshScoreHUD();\n});\n\n// Create the initial empty board\nconst m_board = []; // All board changes are in-place, so it is a const\nfor (let r = 0; r < _constants_js__WEBPACK_IMPORTED_MODULE_3__.NUM_ROW; r++) {\n  m_board[r] = [];\n  for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_3__.NUM_COLUMN; c++) {\n    m_board[r][c] = _constants_js__WEBPACK_IMPORTED_MODULE_3__.SquareState.EMPTY;\n  }\n}\n\n// Manager objects\nlet m_inputManager;\nlet m_canvas = new _canvas_js__WEBPACK_IMPORTED_MODULE_2__.Canvas(m_board);\nlet m_boardEditManager = new _board_edit_manager_js__WEBPACK_IMPORTED_MODULE_6__.BoardEditManager(m_board, m_canvas);\nlet m_boardGenerator = new _board_generator_js__WEBPACK_IMPORTED_MODULE_7__.BoardGenerator(m_board);\nlet m_pieceSelector = new _piece_selector_js__WEBPACK_IMPORTED_MODULE_0__.PieceSelector();\nlet m_boardLoader = new _board_loader_js__WEBPACK_IMPORTED_MODULE_1__.BoardLoader(m_board, m_canvas);\nlet m_historyManager = new _history_manager_js__WEBPACK_IMPORTED_MODULE_8__.HistoryManager();\nlet m_engineAnalysisManager = new _engine_analysis_manager_js__WEBPACK_IMPORTED_MODULE_9__.EngineAnalysisManager(m_board);\n\n// State relevant to game itself\nlet m_currentPiece;\nlet m_nextPiece;\nlet m_level;\nlet m_lines;\nlet m_nextTransitionLineCount;\nlet m_gameState;\nlet m_score;\nlet m_tetrisCount;\nlet m_isPaused = false;\n\n// State relevant to game **implementation**\nlet m_gravityFrameCount;\nlet m_ARE;\nlet m_lineClearFrames;\nlet m_firstPieceDelay;\nlet m_linesPendingClear;\nlet m_pendingPoints;\nlet m_gameLoopFrameCount;\n\n// Monitor speed sampling\nlet m_monitorSampleStartTime = null;\nlet m_sampleFramesLeft = 100;\nlet m_monitorStatus = null;\n\n// State relevant to debugging\nlet m_totalMsElapsed;\nlet m_numFrames;\nlet m_maxMsElapsed;\n\n// Exported methods that allow other classes to access the variables in this file\n\nconst GetCurrentPiece = () => {\n  return m_currentPiece;\n};\n\nconst GetLevel = () => {\n  return m_level || GameSettings.getStartingLevel();\n};\n\nconst GetLines = () => {\n  return m_lines;\n};\n\nconst GetIsPaused = () => {\n  return m_isPaused;\n};\n\nconst G_Restart = function () {\n  if (gameStateIsInGame() || m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.GAME_OVER) {\n    startGame();\n  }\n};\n\nconst G_Rewind = function () {\n  m_historyManager.rewindOnePiece();\n  loadSnapshotFromHistory();\n};\n\nconst G_FastForward = function () {\n  m_historyManager.fastForwardOnePiece();\n  loadSnapshotFromHistory();\n};\n\nconst G_StartPause = function () {\n  // Either starts, pauses, or continues after game over\n  if (m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.GAME_OVER) {\n    m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.START_SCREEN;\n    refreshHeaderText();\n    refreshPreGame();\n  } else if (\n    m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.START_SCREEN ||\n    m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.EDIT_STARTING_BOARD ||\n    m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.RANDOM_BOARD\n  ) {\n    startGame();\n  } else if (gameStateIsInGame()) {\n    togglePause();\n  }\n};\n\nconst G_Quit = function () {\n  console.log(\"QUIT\");\n  // Quits to menu\n  m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.START_SCREEN;\n  refreshHeaderText();\n  refreshPreGame();\n};\n\n// Line clear stuff\n\nfunction getFullRows() {\n  let fullLines = [];\n  for (let r = 0; r < _constants_js__WEBPACK_IMPORTED_MODULE_3__.NUM_ROW; r++) {\n    let isRowFull = true;\n    for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_3__.NUM_COLUMN; c++) {\n      if (m_board[r][c] == _constants_js__WEBPACK_IMPORTED_MODULE_3__.SquareState.EMPTY) {\n        isRowFull = false;\n        break;\n      }\n    }\n    if (isRowFull) {\n      fullLines.push(r);\n    }\n  }\n  return fullLines;\n}\n\nfunction getLinesToTransition(levelNum) {\n  if (levelNum < 10) {\n    // 10 lines per level\n    return (levelNum + 1) * 10;\n  } else if (levelNum <= 15) {\n    // 10 - 15 is all 100 lines\n    return 100;\n  } else if (levelNum >= 29) {\n    // 29 start is 200 lines\n    return 200;\n  }\n  // General case\n  return (levelNum - 5) * 10;\n}\n\nfunction removeFullRows() {\n  const numLinesCleared = m_linesPendingClear.length;\n  for (const r of m_linesPendingClear) {\n    m_board.splice(r, 1);\n    m_board.splice(0, 0, []);\n\n    // Clear out the very top row (newly shifted into the screen)\n    for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_3__.NUM_COLUMN; c++) {\n      m_board[0].push(_constants_js__WEBPACK_IMPORTED_MODULE_3__.SquareState.EMPTY);\n    }\n  }\n  m_linesPendingClear = [];\n\n  // Post-line clear processing\n  if (numLinesCleared > 0) {\n    // Update the lines\n    m_lines += numLinesCleared;\n\n    // Update the tetris rate\n    if (numLinesCleared == 4) {\n      m_tetrisCount += 1;\n    }\n\n    // Maybe level transition\n    if (\n      GameSettings.shouldTransitionEveryLine() ||\n      m_lines >= m_nextTransitionLineCount\n    ) {\n      m_level += 1;\n\n      m_nextTransitionLineCount += 10;\n    }\n\n    // Update the score (must be after lines + transition)\n    m_pendingPoints += _constants_js__WEBPACK_IMPORTED_MODULE_3__.REWARDS[numLinesCleared] * (m_level + 1);\n\n    // Update the board\n    m_canvas.drawBoard();\n  }\n}\n\nfunction isGameOver() {\n  // If the current piece collides with the existing board as it spawns in, you die\n  const currentTetromino = m_currentPiece.activeTetromino;\n  for (let r = 0; r < currentTetromino.length; r++) {\n    for (let c = 0; c < currentTetromino[r].length; c++) {\n      if (\n        currentTetromino[r][c] &&\n        m_board[m_currentPiece.y + r][m_currentPiece.x + c]\n      ) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction getNewPiece() {\n  m_currentPiece = m_nextPiece;\n\n  // Piece status is drawn first, since the read index increments when the next\n  // piece is selected\n  m_nextPiece = new _piece_js__WEBPACK_IMPORTED_MODULE_4__.Piece(m_pieceSelector.getNextPiece(), m_board);\n}\n\nfunction resetGameVariables() {\n  // Parse the level\n  m_level = GameSettings.getStartingLevel();\n\n  // Determine the number of lines till transition\n  m_nextTransitionLineCount = GameSettings.shouldTransitionEvery10Lines()\n    ? 10\n    : getLinesToTransition(m_level);\n\n  // Get the first piece and put it in the next piece slot. Will be bumped to current in getNewPiece()\n  m_pieceSelector.generatePieceSequence();\n\n  if (\n    (m_gameState != _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.EDIT_STARTING_BOARD &&\n      m_gameState != _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.RANDOM_BOARD) ||\n    m_currentPiece == null ||\n    m_nextPiece == null\n  ) {\n    m_nextPiece = new _piece_js__WEBPACK_IMPORTED_MODULE_4__.Piece(m_pieceSelector.getNextPiece(), m_board);\n    getNewPiece();\n    drawNextBox(m_nextPiece);\n  }\n  m_canvas.drawPieceStatusDisplay(m_pieceSelector.getStatusDisplay());\n\n  m_score = 0;\n  m_tetrisCount = 0;\n  m_lines = 0;\n\n  m_isPaused = false;\n}\n\nfunction resetImplementationVariables() {\n  // Implementation variables\n  m_ARE = 0;\n  m_pendingPoints = 0;\n  m_lineClearFrames = 0;\n  m_linesPendingClear = [];\n  m_gravityFrameCount = 0;\n  m_gameLoopFrameCount = GameSettings.getFrameSkipCount();\n  m_firstPieceDelay = 0;\n  m_inputManager.resetLocalVariables();\n\n  // Debug variables\n  m_totalMsElapsed = 0;\n  m_numFrames = 0;\n  m_maxMsElapsed = 0;\n}\n\nfunction startGame() {\n  // Generate the starting board based on the desired starting board type\n  switch (GameSettings.getStartingBoardType()) {\n    case _constants_js__WEBPACK_IMPORTED_MODULE_3__.StartingBoardType.EMPTY:\n      m_boardGenerator.loadEmptyBoard();\n      break;\n\n    case _constants_js__WEBPACK_IMPORTED_MODULE_3__.StartingBoardType.DIG_PRACTICE:\n      m_boardGenerator.loadDigBoard();\n      break;\n\n    case _constants_js__WEBPACK_IMPORTED_MODULE_3__.StartingBoardType.CUSTOM:\n      if (\n        m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.EDIT_STARTING_BOARD ||\n        m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.RANDOM_BOARD\n      ) {\n        // do nothing, since there's already a board there\n      } else {\n        m_boardGenerator.loadEmptyBoard();\n      }\n      break;\n  }\n\n  // Reset game values\n  resetGameVariables();\n  resetImplementationVariables();\n  saveSnapshotToHistory();\n\n  // Start the game in the first piece state\n  m_firstPieceDelay = 90; // Extra delay for first piece\n  m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.FIRST_PIECE;\n\n  // Refresh UI\n  document.activeElement.blur();\n  m_canvas.drawBoard();\n  m_canvas.drawCurrentPiece();\n  refreshHeaderText();\n  refreshScoreHUD();\n  refreshStats();\n  refreshPreGame();\n}\n\n/** Progress the game state, and perform any other updates that occur on\n * particular game state transitions\n * */\nfunction updateGameState() {\n  // FIRST PIECE -> RUNNING\n  if (m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.FIRST_PIECE && m_firstPieceDelay == 0) {\n    m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.RUNNING;\n  }\n  // LINE CLEAR -> ARE\n  else if (m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.LINE_CLEAR && m_lineClearFrames == 0) {\n    m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.ARE;\n  }\n  // ARE -> RUNNING\n  else if (m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.ARE && m_ARE == 0) {\n    // Add pending score to score total and refresh score UI\n    m_score += m_pendingPoints;\n    m_pendingPoints = 0;\n    refreshScoreHUD();\n\n    saveSnapshotToHistory();\n\n    // Draw the next piece, since it's the end of ARE (and that's how NES does it)\n    m_canvas.drawCurrentPiece();\n    drawNextBox(m_nextPiece);\n    m_canvas.drawPieceStatusDisplay(m_pieceSelector.getStatusDisplay());\n\n    // Checked here because the game over condition depends on the newly spawned piece\n    if (isGameOver()) {\n      m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.GAME_OVER;\n      refreshPreGame();\n      refreshHeaderText();\n\n      // debugging\n      console.log(\n        \"Average:\",\n        (m_totalMsElapsed / m_numFrames).toFixed(3),\n        \"Max:\",\n        m_maxMsElapsed.toFixed(3),\n      );\n    } else {\n      m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.RUNNING;\n    }\n  } else if (m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.RUNNING) {\n    // RUNNING -> LINE CLEAR\n    if (m_lineClearFrames > 0) {\n      m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.LINE_CLEAR;\n    }\n    // RUNNING -> ARE\n    else if (m_ARE > 0) {\n      m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.ARE;\n    }\n  }\n  // Otherwise, unchanged.\n}\n\n// Main implementation game logic, triggered by gameLoop()\nfunction runOneFrame() {\n  // If paused, just do nothing.\n  if (!m_isPaused) {\n    switch (m_gameState) {\n      case _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.FIRST_PIECE:\n        // Waiting for first piece\n        m_firstPieceDelay -= 1;\n\n        // Allow piece movement during first piece\n        m_inputManager.handleInputsThisFrame();\n        break;\n\n      case _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.LINE_CLEAR:\n        // Still animating line clear\n        m_lineClearFrames -= 1;\n        // Do subtraction so animation frames count up\n        m_canvas.drawLineClears(\n          m_linesPendingClear,\n          _constants_js__WEBPACK_IMPORTED_MODULE_3__.LINE_CLEAR_DELAY - m_lineClearFrames,\n        );\n        if (m_lineClearFrames == 0) {\n          // Clear the lines for real and shift stuff down\n          removeFullRows();\n        }\n        break;\n\n      case _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.ARE:\n        // Waiting for next piece\n        m_ARE -= 1;\n        break;\n\n      case _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.RUNNING:\n        // Handle inputs\n        m_inputManager.handleInputsThisFrame();\n\n        // Handle gravity\n        if (m_inputManager.getIsSoftDropping()) {\n          // Reset gravity for if they stop soft dropping\n          m_gravityFrameCount = 0;\n        } else {\n          // Increment gravity and shift down if appropriate\n          m_gravityFrameCount += 1;\n\n          // Move the piece down when appropriate\n          if (m_gravityFrameCount >= (0,_constants_js__WEBPACK_IMPORTED_MODULE_3__.GetGravity)(m_level)) {\n            G_MoveCurrentPieceDown();\n            m_gravityFrameCount = 0;\n          }\n        }\n\n        break;\n    }\n\n    updateGameState();\n  }\n\n  // Legacy code from using window timeout instead of animation frame\n  // const desiredFPS = 60 * GameSettings.getGameSpeedMultiplier();\n  // window.setTimeout(gameLoop, 1000 / desiredFPS - msElapsed);\n}\n\n// 60 FPS game loop\nfunction gameLoop() {\n  // Check for weird refresh rates\n  if (m_sampleFramesLeft === 10) {\n    m_monitorSampleStartTime = window.performance.now();\n  } else if (m_sampleFramesLeft === 0) {\n    const timeDiffMs = window.performance.now() - m_monitorSampleStartTime;\n    console.log(`Average frame length ${timeDiffMs / 10} ms`);\n    if (timeDiffMs / 10 > 25 && m_monitorStatus !== \"slow\") {\n      alert(\n        \"Your monitor refreshes slower than 60 Hz. The game will run much slower than usual.\",\n      );\n      m_monitorStatus = \"slow\";\n    }\n    if (timeDiffMs / 10 < 12) {\n      m_monitorStatus = \"fast\";\n    }\n  } else if (m_sampleFramesLeft < -6000) {\n    m_sampleFramesLeft += 6000;\n  }\n  m_sampleFramesLeft--;\n\n  m_gameLoopFrameCount -= m_monitorStatus === \"fast\" ? 0.5 : 1;\n  if (m_gameLoopFrameCount == 0) {\n    m_gameLoopFrameCount = GameSettings.getFrameSkipCount();\n\n    // Check gamepad states\n    m_inputManager.checkGamepadState();\n\n    // Run a frame\n    const start = window.performance.now();\n    runOneFrame();\n    const msElapsed = window.performance.now() - start;\n\n    // Update debug statistics\n    m_numFrames += 1;\n    m_totalMsElapsed += msElapsed;\n    m_maxMsElapsed = Math.max(m_maxMsElapsed, msElapsed);\n  }\n  requestAnimationFrame(gameLoop);\n}\n\nfunction refreshHeaderText() {\n  let newText = \"\";\n  if (m_isPaused) {\n    newText = \"Paused\";\n  } else {\n    switch (m_gameState) {\n      case _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.START_SCREEN:\n        newText = \"Welcome to Tetris Trainer!\";\n        break;\n      case _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.EDIT_STARTING_BOARD:\n        newText =\n          \"Use your mouse to edit the board, then click enter to start!\";\n        break;\n      case _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.RANDOM_BOARD:\n        newText =\n          \"Try to guess what StackRabbit would play, or click enter to start!\";\n        break;\n      case _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.GAME_OVER:\n        newText = \"Game over!\";\n        break;\n    }\n  }\n\n  headerTextElement.innerText = newText;\n}\n\nfunction calcParity(startCol, endCol) {\n  // Calculate parity, where the top left square is \"1\" and adjacent squares are \"-1\"\n  let parity = 0;\n  for (let r = 0; r < _constants_js__WEBPACK_IMPORTED_MODULE_3__.NUM_ROW; r++) {\n    for (let c = Math.max(0, startCol); c < Math.min(endCol, 10); c++) {\n      if (r >= 18) {\n      }\n      if (m_board[r][c] != _constants_js__WEBPACK_IMPORTED_MODULE_3__.SquareState.EMPTY) {\n        // Add 1 or -1 to parity total based on the square's location\n        const cellConstant = (r + c) % 2 == 0 ? 1 : -1;\n        parity += cellConstant;\n      }\n    }\n  }\n  return Math.abs(parity);\n}\n\n// Does nothing at the moment, I don't like how parity stats turned out\nfunction refreshStats() {\n  // const leftParity = calcParity(0, 5);\n  // const middleParity = calcParity(3, 7);\n  // const rightParity = calcParity(5, 10);\n  // parityStatsDiv.innerText = `Left: ${leftParity} \\nMiddle: ${middleParity} \\nRight: ${rightParity}`;\n}\n\nfunction drawNextBox(nextPiece) {\n  m_canvas.drawNextBox(nextPiece);\n  if (nextPiece !== null) {\n    m_engineAnalysisManager.updatePieces(m_currentPiece.id, m_nextPiece.id);\n  }\n}\n\nfunction refreshScoreHUD() {\n  m_canvas.drawLevelDisplay(m_level, hudColor);\n  m_canvas.drawScoreDisplay(m_score, hudColor);\n  m_canvas.drawLinesDisplay(m_lines, hudColor);\n  m_canvas.drawTetrisRateDisplay(m_tetrisCount, m_lines, hudColor);\n}\n\nfunction refreshPreGame() {\n  if (m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.START_SCREEN) {\n    preGameConfigDiv.style.visibility = \"visible\";\n  } else {\n    preGameConfigDiv.style.visibility = \"hidden\";\n  }\n  if (m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.RANDOM_BOARD) {\n    randomBoardResetButton.style.visibility = \"visible\";\n  } else {\n    randomBoardResetButton.style.visibility = \"hidden\";\n  }\n}\n\n/** Delegate functions to controls code */\n\nfunction G_MovePieceLeft() {\n  m_canvas.unDrawCurrentPiece();\n  const didMove = m_currentPiece.moveLeft();\n  m_canvas.drawCurrentPiece();\n  return didMove;\n}\n\n/** @returns whether the piece moved */\nfunction G_MovePieceRight() {\n  m_canvas.unDrawCurrentPiece();\n  const didMove = m_currentPiece.moveRight();\n  m_canvas.drawCurrentPiece();\n  return didMove;\n}\n\n/** @returns whether the piece moved */\nfunction G_MoveCurrentPieceDown() {\n  if (m_currentPiece.shouldLock()) {\n    // Lock in piece and re-render the board\n    lockPiece();\n    return false; // Return false because the piece didn't shift down\n  } else {\n    // Move down as usual\n    m_canvas.unDrawCurrentPiece();\n    m_currentPiece.moveDown();\n    m_canvas.drawCurrentPiece();\n    return true; // Return true because the piece moved down\n  }\n}\n\nfunction lockPiece() {\n  const lockHeight = m_currentPiece.getHeightFromBottom();\n  m_currentPiece.lock();\n  m_inputManager.onPieceLock();\n  m_canvas.drawBoard();\n\n  // Refresh board-based stats\n  refreshStats();\n\n  // Get a new piece but --don't render it-- till after ARE\n  getNewPiece();\n\n  // Update the engine piece\n  m_engineAnalysisManager.updatePieces(m_currentPiece.id, null);\n\n  // Clear lines\n  m_linesPendingClear = getFullRows();\n  if (m_linesPendingClear.length > 0) {\n    m_lineClearFrames = _constants_js__WEBPACK_IMPORTED_MODULE_3__.LINE_CLEAR_DELAY; // Clear delay counts down from max val\n  }\n\n  // Add pushdown points\n  m_pendingPoints += (0,_constants_js__WEBPACK_IMPORTED_MODULE_3__.CalculatePushdownPoints)(\n    m_inputManager.getCellsSoftDropped(),\n  );\n\n  // Get the ARE based on piece lock height\n  /* ARE (frame delay before next piece) is 10 frames for 0-2 height, then an additional\n      2 frames for each group of 4 above that.\n        E.g. 9 high would be: 10 + 2 + 2 = 14 frames */\n  m_ARE = 10 + Math.floor((lockHeight + 2) / 4) * 2;\n}\n\nfunction saveSnapshotToHistory() {\n  m_historyManager.addSnapshotToHistory([\n    m_currentPiece.id,\n    m_nextPiece.id,\n    m_pieceSelector.getReadIndex(),\n    m_level,\n    m_lines,\n    m_nextTransitionLineCount,\n    m_score,\n    m_tetrisCount,\n    JSON.parse(JSON.stringify(m_board)),\n  ]);\n}\n\nfunction loadSnapshotFromHistory() {\n  const snapshotObj = m_historyManager.loadSnapshotFromHistory();\n  let tempBoard, currentPieceId, nextPieceId, pieceReadIndex;\n  if (snapshotObj !== null) {\n    [\n      currentPieceId,\n      nextPieceId,\n      pieceReadIndex,\n      m_level,\n      m_lines,\n      m_nextTransitionLineCount,\n      m_score,\n      m_tetrisCount,\n      tempBoard,\n    ] = snapshotObj;\n\n    // Load the board from snapshot in place\n    for (let r = 0; r < _constants_js__WEBPACK_IMPORTED_MODULE_3__.NUM_ROW; r++) {\n      for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_3__.NUM_COLUMN; c++) {\n        m_board[r][c] = tempBoard[r][c];\n      }\n    }\n    m_currentPiece = new _piece_js__WEBPACK_IMPORTED_MODULE_4__.Piece(_tetrominoes_js__WEBPACK_IMPORTED_MODULE_12__.PIECE_LOOKUP[currentPieceId], m_board);\n    m_nextPiece = new _piece_js__WEBPACK_IMPORTED_MODULE_4__.Piece(_tetrominoes_js__WEBPACK_IMPORTED_MODULE_12__.PIECE_LOOKUP[nextPieceId], m_board);\n    m_pieceSelector.setReadIndex(pieceReadIndex);\n    m_canvas.drawPieceStatusDisplay(m_pieceSelector.getStatusDisplay());\n\n    /* ---------- START GAME ----------- */\n    // Reset game values\n    resetImplementationVariables();\n\n    // Start the game in the first piece state\n    m_firstPieceDelay = 90; // Extra delay for first piece\n    m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.FIRST_PIECE;\n\n    // Refresh UI\n    document.activeElement.blur();\n    m_canvas.drawBoard();\n    m_canvas.drawCurrentPiece();\n    drawNextBox(m_nextPiece);\n    refreshHeaderText();\n    refreshScoreHUD();\n    refreshStats();\n    refreshPreGame();\n  }\n}\n\nfunction G_RotatePieceLeft() {\n  m_canvas.unDrawCurrentPiece();\n  m_currentPiece.rotate(false);\n  m_canvas.drawCurrentPiece();\n}\n\nfunction G_RotatePieceRight() {\n  m_canvas.unDrawCurrentPiece();\n  m_currentPiece.rotate(true);\n  m_canvas.drawCurrentPiece();\n}\n\nfunction togglePause() {\n  // Pause using an independent variable so it'll finish all the\n  // calculations for the current frame, then stop subsequent frames\n  m_isPaused = !m_isPaused;\n  refreshHeaderText();\n}\n\nfunction gameStateIsInGame() {\n  return (\n    m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.FIRST_PIECE ||\n    m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.RUNNING ||\n    m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.ARE ||\n    m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.LINE_CLEAR\n  );\n}\n\nfunction G_GetGameState() {\n  return m_gameState;\n}\n\nfunction G_GetARE() {\n  return m_ARE;\n}\n\n/* --------- MOUSE & KEY INPUT ---------- */\n\nmainCanvas.addEventListener(\"mousedown\", function (e) {\n  m_boardEditManager.onMouseDown(e);\n});\nmainCanvas.addEventListener(\"mousemove\", function (e) {\n  m_boardEditManager.onMouseDrag(e);\n});\nmainCanvas.addEventListener(\"mouseup\", function (e) {\n  m_boardEditManager.onMouseUp(e);\n});\ncenterPanel.addEventListener(\"mouseleave\", function (e) {\n  m_boardEditManager.onMouseUp(e);\n});\n\ndocument.addEventListener(\"keydown\", (e) => {\n  m_inputManager.keyDownListener(e);\n});\ndocument.addEventListener(\"keyup\", (e) => {\n  m_inputManager.keyUpListener(e);\n});\n\nwindow.addEventListener(\"gamepadconnected\", (e) => {\n  m_inputManager.gamepadConnectedListener(e);\n});\nwindow.addEventListener(\"gamepaddisconnected\", () => {\n  m_inputManager.gamepadDisconnectedListener();\n});\n\n/* --------- Preset buttons --------- */\n\nconst presetsMap = {\n  \"preset-standard\": _game_settings_presets_js__WEBPACK_IMPORTED_MODULE_11__.STANDARD_PRESET,\n  // \"preset-standard-tap\": STANDARD_TAPPER_PRESET,\n  \"preset-dig-practice\": _game_settings_presets_js__WEBPACK_IMPORTED_MODULE_11__.DIG_PRACTICE_PRESET,\n  \"preset-drought\": _game_settings_presets_js__WEBPACK_IMPORTED_MODULE_11__.DROUGHT_PRESET,\n  \"preset-killscreen\": _game_settings_presets_js__WEBPACK_IMPORTED_MODULE_11__.KILLSCREEN_PRESET,\n  \"preset-slow-killscreen\": _game_settings_presets_js__WEBPACK_IMPORTED_MODULE_11__.SLOW_KILLSCREEN_PRESET,\n  \"preset-slow-19\": _game_settings_presets_js__WEBPACK_IMPORTED_MODULE_11__.SLOW_19_PRESET,\n  // \"preset-custom-sequence\": CUSTOM_SEQUENCE_PRESET,\n};\n\nfunction deselectAllPresets() {\n  for (const id in presetsMap) {\n    document.getElementById(id).classList.remove(\"selected\");\n  }\n}\n\n// Add click listeners for all the standard preset buttons\nfor (const id in presetsMap) {\n  const presetObj = presetsMap[id];\n\n  document.getElementById(id).addEventListener(\"click\", (e) => {\n    // Load the corresponding preset\n    GameSettingsUi.loadPreset(presetObj);\n    // Select that preset\n    deselectAllPresets();\n    console.log(\"selecting:\", id);\n    document.getElementById(id).classList.add(\"selected\");\n  });\n}\n\ndocument.getElementById(\"preset-edit-board\").addEventListener(\"click\", (e) => {\n  GameSettingsUi.loadPreset(_game_settings_presets_js__WEBPACK_IMPORTED_MODULE_11__.EDIT_BOARD_PRESET);\n\n  m_level = GameSettings.getStartingLevel();\n  m_lines = 0;\n  m_score = 0;\n  m_boardGenerator.loadEmptyBoard();\n  m_currentPiece = null; // Don't want a piece to be rendered at the top of the screen during editing\n  m_canvas.drawBoard();\n  m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.EDIT_STARTING_BOARD;\n  refreshPreGame();\n  refreshHeaderText();\n  refreshScoreHUD();\n});\n\nconst loadRandomBoard = (e) => {\n  GameSettingsUi.loadPreset(_game_settings_presets_js__WEBPACK_IMPORTED_MODULE_11__.EDIT_BOARD_PRESET);\n\n  m_level = GameSettings.getStartingLevel();\n  m_lines = 0;\n  m_score = 0;\n  m_boardGenerator.loadStandardBoard();\n  m_pieceSelector.generatePieceSequence();\n  m_nextPiece = new _piece_js__WEBPACK_IMPORTED_MODULE_4__.Piece(m_pieceSelector.getNextPiece(), m_board);\n  getNewPiece();\n  m_canvas.drawBoard();\n  drawNextBox(m_nextPiece);\n  m_canvas.drawCurrentPiece();\n  m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__.GameState.RANDOM_BOARD;\n  refreshPreGame();\n  refreshHeaderText();\n  refreshScoreHUD();\n};\ndocument\n  .getElementById(\"preset-random-board\")\n  .addEventListener(\"click\", loadRandomBoard);\nrandomBoardResetButton.addEventListener(\"click\", loadRandomBoard);\n\ndocument\n  .getElementById(\"start-button\")\n  .addEventListener(\"click\", (e) => startGame());\n\n/**\n * SCRIPT START\n */\nm_inputManager = new _input_manager_js__WEBPACK_IMPORTED_MODULE_5__.InputManager();\nresetImplementationVariables();\ndocument.getElementById(\"preset-standard\").click();\n\n// Render after a small delay so the font loads\nwindow.setTimeout(() => {\n  m_canvas.drawBoard();\n  drawNextBox(null);\n  m_inputManager.refreshDebugText();\n  refreshHeaderText();\n  refreshStats();\n  refreshScoreHUD();\n  gameLoop();\n}, 200);\n\n\n//# sourceURL=webpack://tetrisjs/./src/index.js?");

/***/ }),

/***/ "./src/input_manager.js":
/*!******************************!*\
  !*** ./src/input_manager.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InputManager: () => (/* binding */ InputManager)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./src/constants.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ \"./src/index.js\");\n\n\nconst GameSettings = __webpack_require__(/*! ./game_settings_manager */ \"./src/game_settings_manager.js\");\nconst keyEditPopup = document.getElementById(\"edit-key\");\n\nconst DEFAULT_KEY_MAP = {\n  RESTART: \"r\",\n  REWIND: \"v\",\n  FAST_FORWARD: \"b\",\n  START_PAUSE: \"Enter\",\n  QUIT: \"q\",\n  ROTATE_LEFT: \"z\",\n  ROTATE_RIGHT: \"x\",\n  LEFT: \"ArrowLeft\",\n  DOWN: \"ArrowDown\",\n  RIGHT: \"ArrowRight\",\n};\n\nlet KEY_MAP = DEFAULT_KEY_MAP;\n\nconst DEFAULT_GAMEPAD_MAP = {\n  RESTART: \"button-8\",\n  REWIND: \"\",\n  FAST_FORWARD: \"\",\n  START_PAUSE: \"button-9\",\n  QUIT: \"\",\n  ROTATE_LEFT: \"button-0\",\n  ROTATE_RIGHT: \"button-1\",\n  LEFT: \"axis-0:-1\",\n  DOWN: \"axis-1:1\",\n  RIGHT: \"axis-0:1\",\n};\n\nlet GAMEPAD_MAP = [];\n\nlet GAMEPAD = [];\nlet GAMEPAD_PREV_STATE = [];\n\nconst idToKeyMap = [\n  [\"key-rot-left\", \"ROTATE_LEFT\"],\n  [\"key-rot-right\", \"ROTATE_RIGHT\"],\n  [\"key-left\", \"LEFT\"],\n  [\"key-right\", \"RIGHT\"],\n  [\"key-down\", \"DOWN\"],\n  [\"key-start-pause\", \"START_PAUSE\"],\n  [\"key-restart\", \"RESTART\"],\n  [\"key-undo\", \"REWIND\"],\n  [\"key-redo\", \"FAST_FORWARD\"],\n  [\"key-quit\", \"QUIT\"],\n];\n\nfunction InputManager() {\n  this.getKeyMapFromCookie();\n  this.resetLocalVariables();\n  this.addKeyClickListeners();\n}\n\n/* ---------------------\n    Key Editing UI\n---------------------- */\n\nInputManager.prototype.saveKeyMapToCookie = function () {\n  document.cookie =\n    \"keymap=\" +\n    escape(JSON.stringify(KEY_MAP)) +\n    \"; expires=Thu, 18 Dec 2030 12:00:00 UTC\";\n  console.log(\"saved new cookie:\", document.cookie);\n};\n\nInputManager.prototype.getKeyMapFromCookie = function () {\n  if (document.cookie) {\n    const keyMapCookie = document.cookie\n      .split(\"; \")\n      .find((row) => row.startsWith(\"keymap=\"));\n    if (keyMapCookie) {\n      const keyMapCookieVal = keyMapCookie.split(\"=\")[1];\n      KEY_MAP = JSON.parse(unescape(keyMapCookieVal));\n      this.refreshKeyVisuals();\n    }\n  }\n};\n\nInputManager.prototype.addKeyClickListeners = function () {\n  for (const [id, key] of idToKeyMap) {\n    document.getElementById(id).addEventListener(\"click\", () => {\n      this.keyBeingEdited = key;\n      keyEditPopup.style.visibility = \"visible\";\n    });\n  }\n};\n\n// Nice lookig\nconst CUSTOM_KEY_DISPLAYS = {\n  ArrowLeft: \"←\",\n  ArrowDown: \"↓\",\n  ArrowRight: \"→\",\n};\n\nInputManager.prototype.refreshKeyVisuals = function () {\n  for (const [id, key] of idToKeyMap) {\n    const rawKey = KEY_MAP[key];\n    document.getElementById(id).innerHTML =\n      CUSTOM_KEY_DISPLAYS[rawKey] || rawKey.toUpperCase();\n  }\n};\n\n/* ---------------------\n    Called by parent\n---------------------- */\n\nInputManager.prototype.getIsSoftDropping = function () {\n  return this.isSoftDropping;\n};\n\nInputManager.prototype.getCellsSoftDropped = function () {\n  return this.cellSoftDropped;\n};\n\nInputManager.prototype.onPieceLock = function () {\n  if (GameSettings.shouldSetDASChargeOnPieceStart()) {\n    this.setDASCharge(GameSettings.getDASWallChargeAmount());\n  } else {\n    // Don't allow DAS charges higher than the wall charge amount.\n    // This is used on DAS speeds with higher ARR but intentionally handicapped starting charges\n    this.setDASCharge(\n      Math.min(GameSettings.getDASWallChargeAmount(), this.dasCharge),\n    );\n  }\n};\n\nInputManager.prototype.resetLocalVariables = function () {\n  this.leftHeld = false;\n  this.rightHeld = false;\n  this.downHeld = false;\n  this.isSoftDropping = false;\n  this.cellSoftDropped = 0;\n  this.dasCharge = GameSettings.getDASTriggerThreshold(); // Starts charged on the first piece\n  this.softDroppedLastFrame = false;\n  this.keyBeingEdited = null;\n};\n\nInputManager.prototype.handleInputsThisFrame = function () {\n  // If holding multiple keys, do nothing\n  const dpadDirectionsHeld = this.downHeld + this.leftHeld + this.rightHeld;\n  if (dpadDirectionsHeld > 1) {\n    this.isSoftDropping = false;\n    this.cellSoftDropped = 0;\n    return;\n  }\n\n  // Move piece down\n  if (this.isSoftDropping && !this.softDroppedLastFrame) {\n    const didMove = (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.G_MoveCurrentPieceDown)();\n    if (didMove) {\n      this.cellSoftDropped += 1;\n    } else {\n      // If it didn't move, then it locked in. Reset soft drop between pieces.\n      this.isSoftDropping = false;\n      this.cellSoftDropped = 0;\n    }\n    this.softDroppedLastFrame = true;\n    return;\n  } else {\n    this.softDroppedLastFrame = false;\n  }\n\n  // DAS left\n  if (this.leftHeld) {\n    this.handleHeldDirection(_constants_js__WEBPACK_IMPORTED_MODULE_0__.Direction.LEFT);\n    return;\n  }\n\n  // DAS right\n  if (this.rightHeld) {\n    this.handleHeldDirection(_constants_js__WEBPACK_IMPORTED_MODULE_0__.Direction.RIGHT);\n  }\n};\n\n/* ---------------------\n    Key listeners \n---------------------- */\n\nInputManager.prototype.keyDownListener = function (event) {\n  // Override the browser's built-in key repeating\n  if (event.repeat) {\n    event.preventDefault();\n    return;\n  }\n\n  if (this.keyBeingEdited) {\n    KEY_MAP[this.keyBeingEdited] = event.key;\n    this.keyBeingEdited = null;\n    keyEditPopup.style.visibility = \"hidden\";\n    this.refreshKeyVisuals();\n    this.saveKeyMapToCookie();\n  }\n\n  // Handle global shortcuts\n  switch (event.key) {\n    case KEY_MAP.RESTART:\n      (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.G_Restart)();\n      break;\n\n    case KEY_MAP.REWIND:\n      (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.G_Rewind)();\n      break;\n\n    case KEY_MAP.FAST_FORWARD:\n      (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.G_FastForward)();\n      break;\n\n    case KEY_MAP.START_PAUSE:\n      (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.G_StartPause)();\n      break;\n\n    case KEY_MAP.QUIT:\n      (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.G_Quit)();\n      break;\n  }\n\n  // Track whether keys are held regardless of state\n  switch (event.key) {\n    case KEY_MAP.LEFT:\n      this.leftHeld = true;\n      event.preventDefault();\n      break;\n    case KEY_MAP.RIGHT:\n      this.rightHeld = true;\n      event.preventDefault();\n      break;\n    case KEY_MAP.DOWN:\n      this.downHeld = true;\n      event.preventDefault();\n      break;\n  }\n\n  // Only actually move the pieces if in the proper game state\n  const gameState = (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.G_GetGameState)();\n  if (canMovePiecesSidewaysOrRotate(gameState)) {\n    switch (event.key) {\n      case KEY_MAP.LEFT:\n        this.handleTappedDirection(_constants_js__WEBPACK_IMPORTED_MODULE_0__.Direction.LEFT);\n        break;\n      case KEY_MAP.RIGHT:\n        this.handleTappedDirection(_constants_js__WEBPACK_IMPORTED_MODULE_0__.Direction.RIGHT);\n        break;\n      case KEY_MAP.ROTATE_LEFT:\n        (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.G_RotatePieceLeft)();\n        break;\n      case KEY_MAP.ROTATE_RIGHT:\n        (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.G_RotatePieceRight)();\n        break;\n    }\n  } else {\n    switch (event.key) {\n      case KEY_MAP.ROTATE_LEFT:\n        console.log(\"rotate rejected, state: \", (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.G_GetGameState)());\n        break;\n      case KEY_MAP.ROTATE_RIGHT:\n        console.log(\"rotate rejected, state: \", (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.G_GetGameState)());\n        break;\n    }\n  }\n\n  if (canDoAllPieceMovements(gameState)) {\n    switch (event.key) {\n      case KEY_MAP.DOWN:\n        this.isSoftDropping = true;\n        break;\n    }\n  }\n};\n\nInputManager.prototype.keyUpListener = function (event) {\n  // Track whether keys are held regardless of state\n  if (event.key == KEY_MAP.LEFT) {\n    this.leftHeld = false;\n  } else if (event.key == KEY_MAP.RIGHT) {\n    this.rightHeld = false;\n  } else if (event.key == KEY_MAP.DOWN) {\n    this.downHeld = false;\n    this.isSoftDropping = false; // Can stop soft dropping in any state\n    this.cellSoftDropped = 0;\n  }\n};\n\n/* ---------------------\n    Gamepad State\n---------------------- */\n\nfunction getKeyFromId(id) {\n  const foundItem = idToKeyMap.find(([keyId]) => id === keyId);\n  return foundItem ? foundItem[1] : null;\n}\n\nInputManager.prototype.createControlsContainer = function (\n  index,\n  controllerName,\n) {\n  let existingControls = document.getElementById(\"controls-container\");\n  let clonedControls = existingControls.cloneNode(true);\n  clonedControls.id = \"controls-container-\" + index;\n\n  let bodyInner = document.getElementById(\"body-inner\");\n\n  let containerLabel = document.createElement(\"div\");\n  containerLabel.innerHTML = controllerName;\n  containerLabel.style.marginTop = \"10px\";\n  containerLabel.style.marginBottom = \"-40px\";\n  containerLabel.style.textAlign = \"center\";\n\n  let elements = clonedControls.getElementsByClassName(\"key-explanation\");\n  for (var i = 0; i < elements.length; i++) {\n    let item = elements.item(i);\n    if (item.innerHTML === \"Edit board\") {\n      let parentElement = item.parentNode;\n      let grandparentElement = parentElement.parentNode;\n      grandparentElement.removeChild(parentElement);\n    }\n  }\n\n  bodyInner.appendChild(containerLabel);\n  bodyInner.appendChild(clonedControls);\n\n  this.changeInnerElementIds(clonedControls, index);\n};\n\nInputManager.prototype.changeInnerElementIds = function (\n  container,\n  gamepadIndex,\n) {\n  let cur = this;\n  let innerElements = container.querySelectorAll('[id^=\"key-\"]');\n  innerElements.forEach(function (element) {\n    let originalId = element.id;\n    element.id = \"gamepad-\" + gamepadIndex + \"-\" + originalId;\n    let key = getKeyFromId(originalId);\n    element.innerHTML = GAMEPAD_MAP[gamepadIndex][key];\n\n    document.getElementById(element.id).addEventListener(\"click\", () => {\n      cur.keyBeingEdited = key;\n      keyEditPopup.style.visibility = \"visible\";\n    });\n  });\n};\n\nInputManager.prototype.gamepadConnectedListener = function (event) {\n  if (GAMEPAD[event.gamepad.index]) return;\n  GAMEPAD.push(Object.create(event.gamepad));\n  GAMEPAD_PREV_STATE.push({\n    axes: event.gamepad.axes,\n    buttons: event.gamepad.buttons.map((obj) => obj.pressed),\n    timestamp: event.gamepad.timestamp,\n  });\n  GAMEPAD_MAP.push(DEFAULT_GAMEPAD_MAP);\n  this.createControlsContainer(event.gamepad.index, event.gamepad.id);\n};\n\nInputManager.prototype.gamepadDisconnectedListener = function () {};\n\nInputManager.prototype.checkGamepadState = function () {\n  const gamepads = navigator.getGamepads();\n  for (let i = 0; i < gamepads.length; i++) {\n    const gamepad = gamepads[i];\n    const prev_state = GAMEPAD_PREV_STATE[i];\n\n    if (!gamepad || !gamepad.connected) continue;\n    if (!prev_state) continue;\n\n    if (gamepad.timestamp == prev_state.timestamp) {\n      continue;\n    }\n\n    // axes\n    for (let j = 0; j < gamepad.axes.length; j++) {\n      const threshold = 0.5;\n      const gamepad_axis = gamepad.axes[j];\n      const prev_state_axis = prev_state.axes[j];\n      // right\n      if (gamepad_axis > threshold && prev_state_axis <= threshold) {\n        this.gamepadAxesDown(i, j, 1);\n      }\n      // left\n      if (gamepad_axis < -threshold && prev_state_axis >= -threshold) {\n        this.gamepadAxesDown(i, j, -1);\n      }\n      // released\n      if (\n        Math.abs(gamepad_axis) <= threshold &&\n        Math.abs(prev_state_axis) > threshold\n      ) {\n        this.gamepadAxesUp(i, j, prev_state_axis < 0 ? -1 : 1);\n      }\n    }\n\n    // buttons\n    for (let j = 0; j < gamepad.buttons.length; j++) {\n      const gamepad_button = gamepad.buttons[j];\n      const prev_state_button = prev_state.buttons[j];\n      if (!prev_state_button && gamepad_button.pressed) {\n        this.gamepadButtonDown(i, j);\n      }\n      if (prev_state_button && !gamepad_button.pressed) {\n        this.gamepadButtonUp(i, j);\n      }\n    }\n\n    GAMEPAD_PREV_STATE[i].axes = gamepad.axes;\n    GAMEPAD_PREV_STATE[i].buttons = gamepad.buttons.map((obj) => obj.pressed);\n    GAMEPAD_PREV_STATE[i].timestamp = gamepad.timestamp;\n  }\n};\n\nInputManager.prototype.gamepadButtonDown = function (i, _key) {\n  const key = `button-${_key}`;\n  this.gamepadInputDown(i, key);\n};\n\nInputManager.prototype.gamepadButtonUp = function (i, _key) {\n  const key = `button-${_key}`;\n  this.gamepadInputUp(i, key);\n};\n\nInputManager.prototype.gamepadAxesDown = function (i, _key, value) {\n  const key = `axis-${_key}:${value}`;\n  this.gamepadInputDown(i, key);\n};\n\nInputManager.prototype.gamepadAxesUp = function (i, _key, value) {\n  const key = `axis-${_key}:${value}`;\n  this.gamepadInputUp(i, key);\n};\n\nInputManager.prototype.refreshGamepadVisuals = function (i) {\n  for (const [id, key] of idToKeyMap) {\n    const rawKey = GAMEPAD_MAP[i][key];\n    document.getElementById(\"gamepad-\" + i + \"-\" + id).innerHTML = rawKey;\n  }\n};\n\nInputManager.prototype.gamepadInputDown = function (i, key) {\n  // edit key\n  if (this.keyBeingEdited) {\n    GAMEPAD_MAP[i][this.keyBeingEdited] = key;\n    this.keyBeingEdited = null;\n    keyEditPopup.style.visibility = \"hidden\";\n    this.refreshGamepadVisuals(i);\n    // this.saveKeyMapToCookie();\n    return;\n  }\n\n  // Handle global shortcuts\n  switch (key) {\n    case GAMEPAD_MAP[i].RESTART:\n      (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.G_Restart)();\n      break;\n\n    case GAMEPAD_MAP[i].REWIND:\n      (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.G_Rewind)();\n      break;\n\n    case GAMEPAD_MAP[i].FAST_FORWARD:\n      (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.G_FastForward)();\n      break;\n\n    case GAMEPAD_MAP[i].START_PAUSE:\n      (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.G_StartPause)();\n      break;\n\n    case GAMEPAD_MAP[i].QUIT:\n      (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.G_Quit)();\n      break;\n  }\n\n  // Track whether keys are held regardless of state\n  switch (key) {\n    case GAMEPAD_MAP[i].LEFT:\n      this.leftHeld = true;\n      break;\n    case GAMEPAD_MAP[i].RIGHT:\n      this.rightHeld = true;\n      break;\n    case GAMEPAD_MAP[i].DOWN:\n      this.downHeld = true;\n      break;\n  }\n\n  // Only actually move the pieces if in the proper game state\n  const gameState = (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.G_GetGameState)();\n  if (canMovePiecesSidewaysOrRotate(gameState)) {\n    switch (key) {\n      case GAMEPAD_MAP[i].LEFT:\n        this.handleTappedDirection(_constants_js__WEBPACK_IMPORTED_MODULE_0__.Direction.LEFT);\n        break;\n      case GAMEPAD_MAP[i].RIGHT:\n        this.handleTappedDirection(_constants_js__WEBPACK_IMPORTED_MODULE_0__.Direction.RIGHT);\n        break;\n      case GAMEPAD_MAP[i].ROTATE_LEFT:\n        (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.G_RotatePieceLeft)();\n        break;\n      case GAMEPAD_MAP[i].ROTATE_RIGHT:\n        (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.G_RotatePieceRight)();\n        break;\n    }\n  } else {\n    switch (key) {\n      case GAMEPAD_MAP[i].ROTATE_LEFT:\n        console.log(\"rotate rejected, state: \", (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.G_GetGameState)());\n        break;\n      case GAMEPAD_MAP[i].ROTATE_RIGHT:\n        console.log(\"rotate rejected, state: \", (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.G_GetGameState)());\n        break;\n    }\n  }\n\n  if (canDoAllPieceMovements(gameState)) {\n    switch (key) {\n      case GAMEPAD_MAP[i].DOWN:\n        this.isSoftDropping = true;\n        break;\n    }\n  }\n};\n\nInputManager.prototype.gamepadInputUp = function (i, key) {\n  // Track whether keys are held regardless of state\n  if (key == GAMEPAD_MAP[i].LEFT) {\n    this.leftHeld = false;\n  } else if (key == GAMEPAD_MAP[i].RIGHT) {\n    this.rightHeld = false;\n  } else if (key == GAMEPAD_MAP[i].DOWN) {\n    this.downHeld = false;\n    this.isSoftDropping = false; // Can stop soft dropping in any state\n    this.cellSoftDropped = 0;\n  }\n};\n\n/* ---------------------\n    Private helpers\n---------------------- */\n\nInputManager.prototype.tryShiftPiece = function (direction) {\n  // Try to move the piece and store whether it actually did or not\n  const didMove =\n    direction == _constants_js__WEBPACK_IMPORTED_MODULE_0__.Direction.LEFT ? (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.G_MovePieceLeft)() : (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.G_MovePieceRight)();\n  // Wall charge if it didn't move\n  if (!didMove) {\n    this.setDASCharge(GameSettings.getDASTriggerThreshold());\n  }\n  return didMove;\n};\n\nInputManager.prototype.handleHeldDirection = function (direction) {\n  const DASTriggerThreshold = GameSettings.getDASTriggerThreshold();\n  // Increment DAS\n  this.setDASCharge(Math.min(DASTriggerThreshold, this.dasCharge + 1));\n\n  // Attempt to shift the piece once it hits the trigger\n  if (this.dasCharge == DASTriggerThreshold) {\n    const didMove = this.tryShiftPiece(direction);\n    if (didMove) {\n      // Move DAS to charged floor for another cycle of ARR\n      this.setDASCharge(GameSettings.getDASChargedFloor());\n    }\n  }\n};\n\n// Handle single taps of the dpad, if in the proper state\nInputManager.prototype.handleTappedDirection = function (direction) {\n  if (canMovePiecesSidewaysOrRotate((0,_index_js__WEBPACK_IMPORTED_MODULE_1__.G_GetGameState)())) {\n    // Update the DAS charge\n    this.setDASCharge(GameSettings.getDASChargeAfterTap());\n\n    this.tryShiftPiece(direction);\n  }\n};\n\n// Updates the DAS charge and refreshes the debug text\nInputManager.prototype.setDASCharge = function (value) {\n  this.dasCharge = value;\n  // this.refreshDebugText();\n};\n\nInputManager.prototype.refreshDebugText = function () {\n  let debugStr = \"\";\n  let dasVisualized = \"\";\n  for (let i = 0; i < this.dasCharge; i++) {\n    dasVisualized += \"|\";\n  }\n  // Have something on the second line so it's always the same height\n  if (this.dasCharge == 0) {\n    dasVisualized = \".\";\n  }\n  debugStr +=\n    this.dasCharge +\n    \"/\" +\n    GameSettings.getDASTriggerThreshold() +\n    \"\\n\" +\n    dasVisualized;\n};\n\n// Checks if the game state allows for piece movements horizontally\nfunction canMovePiecesSidewaysOrRotate(gameState) {\n  return (\n    !(0,_index_js__WEBPACK_IMPORTED_MODULE_1__.GetIsPaused)() &&\n    (gameState == _constants_js__WEBPACK_IMPORTED_MODULE_0__.GameState.RUNNING || gameState == _constants_js__WEBPACK_IMPORTED_MODULE_0__.GameState.FIRST_PIECE)\n  );\n}\n\n// Checks if the game state allows for downward piece movement\nfunction canDoAllPieceMovements(gameState) {\n  return !(0,_index_js__WEBPACK_IMPORTED_MODULE_1__.GetIsPaused)() && gameState == _constants_js__WEBPACK_IMPORTED_MODULE_0__.GameState.RUNNING;\n}\n\n\n//# sourceURL=webpack://tetrisjs/./src/input_manager.js?");

/***/ }),

/***/ "./src/piece.js":
/*!**********************!*\
  !*** ./src/piece.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Piece: () => (/* binding */ Piece)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./src/constants.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! . */ \"./src/index.js\");\n\n\n\n/**\n * Piece object, responsible for moving and rotating itself within the board.\n * @param {[\n *    rotationList: list<4x4 matrix>,\n *    colorId: number,\n *    id: string (piece letter names)\n * ]} pieceData\n * @param {int[][]} board\n */\nfunction Piece(pieceData, board) {\n  this.rotationList = pieceData[0]; // All of the available rotations\n  this.colorId = pieceData[1];\n  this.id = pieceData[2];\n  this.board = board;\n\n  this.rotationIndex = 0; // Start from the first rotation\n  this.activeTetromino = this.rotationList[this.rotationIndex];\n\n  this.x = 3;\n  this.y = this.id == \"I\" ? -2 : -1; // The I piece spawns higher than the others\n}\n\nPiece.prototype.equals = function (otherPiece) {\n  return this.id === otherPiece.id;\n};\n\n// Get the height of the lowest row that the piece occupies\nPiece.prototype.getHeightFromBottom = function () {\n  let maxY = 0;\n  for (let r = 0; r < this.activeTetromino.length; r++) {\n    for (let c = 0; c < this.activeTetromino[r].length; c++) {\n      // If the square is occupied by the piece, update the max\n      if (this.activeTetromino[r][c]) {\n        maxY = Math.max(maxY, this.y + r);\n      }\n    }\n  }\n  return _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_ROW - maxY;\n};\n\nPiece.prototype.shouldLock = function () {\n  return this.collision(0, 1, this.activeTetromino);\n};\n\n// move Down the piece\nPiece.prototype.moveDown = function () {\n  this.y++;\n};\n\n/**\n * Attempt to move the piece right.\n * @returns true if the piece moved */\nPiece.prototype.moveRight = function () {\n  if (this.collision(1, 0, this.activeTetromino)) {\n    return false;\n  } else {\n    // No collision, move the piece\n    this.x++;\n    return true;\n  }\n};\n\n/**\n * Attempt to move the piece left.\n * @returns true if the piece moved */\nPiece.prototype.moveLeft = function () {\n  if (this.collision(-1, 0, this.activeTetromino)) {\n    return false;\n  } else {\n    // No collision, move the piece\n    this.x--;\n    return true;\n  }\n};\n\n// rotate the piece\nPiece.prototype.rotate = function (isClockwise) {\n  const offset = isClockwise ? 1 : -1;\n  const nextIndex =\n    (this.rotationIndex + offset + this.rotationList.length) %\n    this.rotationList.length;\n  const nextPattern = this.rotationList[nextIndex];\n\n  // Rotate as long as the new orientation doesn't collide with the board\n  if (!this.collision(0, 0, nextPattern)) {\n    this.rotationIndex = nextIndex;\n    this.activeTetromino = this.rotationList[this.rotationIndex];\n  }\n};\n\n// Lock the piece in place\nPiece.prototype.lock = function () {\n  for (let r = 0; r < this.activeTetromino.length; r++) {\n    for (let c = 0; c < this.activeTetromino[r].length; c++) {\n      // we skip the vacant squares\n      if (!this.activeTetromino[r][c]) {\n        continue;\n      }\n\n      // we lock the piece\n      const newY = this.y + r;\n      const newX = this.x + c;\n      if (newY >= 0 && newY < _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_ROW && newX >= 0 && newX < _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_COLUMN) {\n        this.board[this.y + r][this.x + c] = this.colorId;\n      }\n    }\n  }\n};\n\n// Collision fucntion\nPiece.prototype.collision = function (x, y, piece) {\n  for (let r = 0; r < piece.length; r++) {\n    for (let c = 0; c < piece[r].length; c++) {\n      // if the square is empty, we skip it\n      if (!piece[r][c]) {\n        continue;\n      }\n      // coordinates of the piece after movement\n      let newX = this.x + c + x;\n      let newY = this.y + r + y;\n\n      // conditions\n      if (newX < 0 || newX >= _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_COLUMN || newY >= _constants_js__WEBPACK_IMPORTED_MODULE_0__.NUM_ROW) {\n        return true;\n      }\n      // skip newY < 0; board[-1] will crush our game\n      if (newY < 0) {\n        continue;\n      }\n      // check if there is a locked piece alrady in place\n      if (this.board[newY][newX] != 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n\n//# sourceURL=webpack://tetrisjs/./src/piece.js?");

/***/ }),

/***/ "./src/piece_selector.js":
/*!*******************************!*\
  !*** ./src/piece_selector.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PieceSelector: () => (/* binding */ PieceSelector)\n/* harmony export */ });\n/* harmony import */ var _tetrominoes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tetrominoes.js */ \"./src/tetrominoes.js\");\n\nconst GameSettings = __webpack_require__(/*! ./game_settings_manager */ \"./src/game_settings_manager.js\");\n\n/**\n * A class that handles the piece selection logic.\n * Pregenerates a list of 2000 pieces at the start of the game, which can start out with\n * a custon piece sequence if the user has opted to do that.\n */\nfunction PieceSelector() {\n  this.sequence = []; // Array of piece IDs\n  this.startOfRandomSequence = 0; // The first index that is randomly generated, i.e. not part of a custom inputted sequence\n  this.readIndex = 0;\n}\n\n/**\n  Public functions\n  */\n\nPieceSelector.prototype.generatePieceSequence = function () {\n  // Get piece sequence (with spaces trimmed)\n  const pieceSequenceStr = GameSettings.getPieceSequence();\n  // console.log(\"peice sequence:\", pieceSequenceStr);\n\n  let writeIndex = 0;\n\n  // Copy the custom sequence into the main sequence\n  if (pieceSequenceStr.length > 0) {\n    for (let i = 0; i < pieceSequenceStr.length; i++) {\n      this.sequence[i] = pieceSequenceStr.charAt(i);\n      writeIndex++;\n    }\n  }\n\n  // Fill the rest with a random sequence\n  while (writeIndex < 2000) {\n    const prevPieceId = writeIndex == 0 ? null : this.sequence[writeIndex - 1];\n    this.sequence[writeIndex] = getRandomPiece(prevPieceId);\n    writeIndex++;\n  }\n\n  // console.log(this.sequence);\n\n  this.readIndex = 0;\n  this.startOfRandomSequence = pieceSequenceStr.length;\n};\n\nPieceSelector.prototype.getReadIndex = function () {\n  return this.readIndex;\n};\n\nPieceSelector.prototype.setReadIndex = function (value) {\n  this.readIndex = value;\n};\n\n// Get the next piece, whether that be specified or random\nPieceSelector.prototype.getNextPiece = function () {\n  const nextPieceId = this.sequence[this.readIndex];\n  this.readIndex++;\n  return _tetrominoes_js__WEBPACK_IMPORTED_MODULE_0__.PIECE_LOOKUP[nextPieceId];\n};\n\n/**\n * Get summary of piece status (e.g. \"Random piece\" or e.g. \"Piece 5 of 13\"),\n * split over two lines.\n */\nPieceSelector.prototype.getStatusDisplay = function () {\n  if (this.readIndex < this.startOfRandomSequence) {\n    // The piece number equals the read index since the read index is always pointing to the piece *after* the one on screen\n    return [\"Piece \", this.readIndex + \"/\" + this.startOfRandomSequence];\n  }\n  return [];\n};\n\n/**\n  \"Private\" functions - unused outside of this file\n  */\n\n// Get the ID of a random piece, following the original RNG of NES tetris\nfunction getRandomPiece(previousPieceId) {\n  // Roll once 0-7, where 7 is a dummy value\n  let r = Math.floor(Math.random() * (_tetrominoes_js__WEBPACK_IMPORTED_MODULE_0__.PIECE_LIST.length + 1));\n  const tempPieceId = r !== _tetrominoes_js__WEBPACK_IMPORTED_MODULE_0__.PIECE_LIST.length ? _tetrominoes_js__WEBPACK_IMPORTED_MODULE_0__.PIECE_LIST[r][2] : \"\";\n  if (\n    r == _tetrominoes_js__WEBPACK_IMPORTED_MODULE_0__.PIECE_LIST.length || // Re-roll dummy value\n    tempPieceId === previousPieceId || // Re-roll repeat piece\n    (GameSettings.shouldReduceLongBars() && tempPieceId == \"I\") // Re-roll I pieces when drought mode on\n  ) {\n    // Reroll once for repeats (or dummy) to reduce repeated pieces\n    r = Math.floor(Math.random() * _tetrominoes_js__WEBPACK_IMPORTED_MODULE_0__.PIECE_LIST.length);\n  }\n  const nextPieceData = _tetrominoes_js__WEBPACK_IMPORTED_MODULE_0__.PIECE_LIST[r];\n  return nextPieceData[2]; // Return the string ID of the new piece\n}\n\n\n//# sourceURL=webpack://tetrisjs/./src/piece_selector.js?");

/***/ }),

/***/ "./src/tetrominoes.js":
/*!****************************!*\
  !*** ./src/tetrominoes.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PIECE_LIST: () => (/* binding */ PIECE_LIST),\n/* harmony export */   PIECE_LOOKUP: () => (/* binding */ PIECE_LOOKUP)\n/* harmony export */ });\nconst PIECE_I = [\n  [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [1, 1, 1, 1],\n    [0, 0, 0, 0],\n  ],\n\n  [\n    [0, 0, 1, 0],\n    [0, 0, 1, 0],\n    [0, 0, 1, 0],\n    [0, 0, 1, 0],\n  ],\n];\n\nconst PIECE_J = [\n  [\n    [0, 0, 0, 0],\n    [0, 1, 1, 1],\n    [0, 0, 0, 1],\n  ],\n\n  [\n    [0, 0, 1, 0],\n    [0, 0, 1, 0],\n    [0, 1, 1, 0],\n  ],\n\n  [\n    [0, 1, 0, 0],\n    [0, 1, 1, 1],\n    [0, 0, 0, 0],\n  ],\n\n  [\n    [0, 0, 1, 1],\n    [0, 0, 1, 0],\n    [0, 0, 1, 0],\n  ],\n];\n\nconst PIECE_L = [\n  [\n    [0, 0, 0, 0],\n    [0, 1, 1, 1],\n    [0, 1, 0, 0],\n  ],\n\n  [\n    [0, 1, 1, 0],\n    [0, 0, 1, 0],\n    [0, 0, 1, 0],\n  ],\n\n  [\n    [0, 0, 0, 1],\n    [0, 1, 1, 1],\n    [0, 0, 0, 0],\n  ],\n\n  [\n    [0, 0, 1, 0],\n    [0, 0, 1, 0],\n    [0, 0, 1, 1],\n  ],\n];\n\nconst PIECE_O = [\n  [\n    [0, 0, 0, 0],\n    [0, 1, 1, 0],\n    [0, 1, 1, 0],\n    [0, 0, 0, 0],\n  ],\n];\n\nconst PIECE_S = [\n  [\n    [0, 0, 0, 0],\n    [0, 0, 1, 1],\n    [0, 1, 1, 0],\n  ],\n\n  [\n    [0, 0, 1, 0],\n    [0, 0, 1, 1],\n    [0, 0, 0, 1],\n  ],\n];\n\nconst PIECE_T = [\n  [\n    [0, 0, 0, 0],\n    [0, 1, 1, 1],\n    [0, 0, 1, 0],\n  ],\n\n  [\n    [0, 0, 1, 0],\n    [0, 1, 1, 0],\n    [0, 0, 1, 0],\n  ],\n\n  [\n    [0, 0, 1, 0],\n    [0, 1, 1, 1],\n    [0, 0, 0, 0],\n  ],\n\n  [\n    [0, 0, 1, 0],\n    [0, 0, 1, 1],\n    [0, 0, 1, 0],\n  ],\n];\n\nconst PIECE_Z = [\n  [\n    [0, 0, 0, 0],\n    [0, 1, 1, 0],\n    [0, 0, 1, 1],\n  ],\n\n  [\n    [0, 0, 0, 1],\n    [0, 0, 1, 1],\n    [0, 0, 1, 0],\n  ],\n];\n\n// The piece list, with colors and letter identifiers\n\n// [Definition, Color Set, Corresponding Letter]\nconst PIECE_LOOKUP = {\n  Z: [PIECE_Z, 2, \"Z\"],\n  S: [PIECE_S, 3, \"S\"],\n  T: [PIECE_T, 1, \"T\"],\n  O: [PIECE_O, 1, \"O\"],\n  L: [PIECE_L, 2, \"L\"],\n  I: [PIECE_I, 1, \"I\"],\n  J: [PIECE_J, 3, \"J\"],\n};\n\nconst PIECE_LIST = Object.values(PIECE_LOOKUP);\n\n\n//# sourceURL=webpack://tetrisjs/./src/tetrominoes.js?");

/***/ }),

/***/ "./src/ui_manager.js":
/*!***************************!*\
  !*** ./src/ui_manager.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./src/constants.js\");\n/**\n * Handle UI animations that are indepedent of the main tetris game\n */\n\n\n// Get elements\nconst mainCanvas = document.getElementById(\"main-canvas\");\nconst leftPanelOpenToggle = document.getElementById(\"left-panel-toggle-button\");\nconst leftPanel = document.getElementById(\"left-panel\");\nconst rightPanel = document.getElementById(\"right-panel\");\nlet leftPanelIsOpen = true;\n\nleftPanel.style.minHeight = _constants_js__WEBPACK_IMPORTED_MODULE_0__.BOARD_HEIGHT + 60;\n\n// Resize the canvas based on the square size\nmainCanvas.setAttribute(\"height\", _constants_js__WEBPACK_IMPORTED_MODULE_0__.BOARD_HEIGHT);\nmainCanvas.setAttribute(\"width\", _constants_js__WEBPACK_IMPORTED_MODULE_0__.DISPLAY_FULL_WIDTH);\n\nleftPanelOpenToggle.innerText = \"<\"; // Set here b/c the < messes with the HTML auto-format\nleftPanelOpenToggle.addEventListener(\"click\", function (e) {\n  leftPanelIsOpen = !leftPanelIsOpen;\n\n  if (leftPanelIsOpen) {\n    leftPanel.style.marginLeft = 0;\n    leftPanelOpenToggle.innerText = \"<\";\n  } else {\n    leftPanel.style.marginLeft = -290;\n    leftPanelOpenToggle.innerText = \">\";\n  }\n});\n\n\n//# sourceURL=webpack://tetrisjs/./src/ui_manager.js?");

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DecompressBoard: () => (/* binding */ DecompressBoard),\n/* harmony export */   debugPrintBoard: () => (/* binding */ debugPrintBoard)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./src/constants.js\");\n\n\nfunction debugPrintBoard(board) {\n  let boardStr = \"\";\n  for (let r = 0; r < _constants_js__WEBPACK_IMPORTED_MODULE_0__.ROW; r++) {\n    for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_0__.COLUMN; c++) {\n      boardStr += board[r][c] == _constants_js__WEBPACK_IMPORTED_MODULE_0__.VACANT ? \"_\" : \"0\";\n    }\n    boardStr += \"\\n\";\n  }\n  console.log(boardStr);\n}\n\nconst BOARD_COMPRESSION_SCHEME = {\n  a: \"00000\",\n  b: \"00001\",\n  c: \"00010\",\n  d: \"00011\",\n  e: \"00100\",\n  f: \"00101\",\n  g: \"00110\",\n  h: \"00111\",\n  i: \"01000\",\n  j: \"01001\",\n  k: \"01010\",\n  l: \"01011\",\n  m: \"01100\",\n  n: \"01101\",\n  o: \"01110\",\n  p: \"01111\",\n  q: \"10000\",\n  r: \"10001\",\n  s: \"10010\",\n  t: \"10011\",\n  u: \"10100\",\n  v: \"10101\",\n  w: \"10110\",\n  x: \"10111\",\n  y: \"11000\",\n  z: \"11001\",\n  A: \"11010\",\n  B: \"11011\",\n  C: \"11100\",\n  D: \"11101\",\n  E: \"11110\",\n  F: \"11111\",\n};\n\nfunction DecompressBoard(boardStr) {\n  // Handle encoded boards\n  if (boardStr.includes(\",\")) {\n    const split = boardStr.split(\",\");\n    const numEmptyRows = parseInt(split[0]);\n    const encodedRows = split[1];\n    const numFullRightWellRows = parseInt(split[2]);\n    const newBoard = [];\n    for (let i = 0; i < numEmptyRows; i++) {\n      newBoard.push([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    for (let i = 0; i < encodedRows.length; i += 2) {\n      const chunk1 = BOARD_COMPRESSION_SCHEME[encodedRows.charAt(i)];\n      const chunk2 = BOARD_COMPRESSION_SCHEME[encodedRows.charAt(i + 1)];\n      const newRow = (chunk1 + chunk2).split(\"\");\n      newBoard.push(newRow.map((x) => parseInt(x)));\n    }\n    for (let i = 0; i < numFullRightWellRows; i++) {\n      newBoard.push([1, 1, 1, 1, 1, 1, 1, 1, 1, 0]);\n    }\n    if (newBoard.length == 20) {\n      return newBoard;\n    } else {\n      throw new Error(\n        \"Invalid compressed board. Must contain 20 rows, but found: \" +\n          newBoard.length,\n      );\n    }\n  }\n}\n\n\n//# sourceURL=webpack://tetrisjs/./src/utils.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;